(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{613:function(_,v,l){_.exports=l.p+"assets/img/image-20211011100836343.b5199b3d.png"},614:function(_,v,l){_.exports=l.p+"assets/img/image-20211011100851263.0b970237.png"},615:function(_,v,l){_.exports=l.p+"assets/img/image-20211011100859764.1c5a2ae7.png"},616:function(_,v,l){_.exports=l.p+"assets/img/image-20211104145654065.bcd1d6f7.png"},617:function(_,v,l){_.exports=l.p+"assets/img/image-20211104150415286.429945b1.png"},618:function(_,v,l){_.exports=l.p+"assets/img/image-20211104150523096.65c7e28f.png"},619:function(_,v,l){_.exports=l.p+"assets/img/image-20211011100934447.b14ff430.png"},620:function(_,v,l){_.exports=l.p+"assets/img/image-20211011101033802.017c7a6a.png"},843:function(_,v,l){"use strict";l.r(v);var i=l(12),a=Object(i.a)({},(function(){var _=this,v=_.$createElement,i=_._self._c||v;return i("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[i("h1",{attrs:{id:"操作系统"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#操作系统"}},[_._v("#")]),_._v(" 操作系统")]),_._v(" "),i("h2",{attrs:{id:"概述"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[_._v("#")]),_._v(" 概述")]),_._v(" "),i("h3",{attrs:{id:"作用"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[_._v("#")]),_._v(" 作用")]),_._v(" "),i("ul",[i("li",[_._v("通过资源管理提高计算机系统的效率")]),_._v(" "),i("li",[_._v("向用户提供良好的人机界面")])]),_._v(" "),i("h3",{attrs:{id:"特征"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#特征"}},[_._v("#")]),_._v(" 特征")]),_._v(" "),i("ul",[i("li",[_._v("并发性、共享性、虚拟性、不确定性")])]),_._v(" "),i("h3",{attrs:{id:"功能"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#功能"}},[_._v("#")]),_._v(" 功能")]),_._v(" "),i("ul",[i("li",[_._v("进程、存储、文件、设备、作业管理")])]),_._v(" "),i("h3",{attrs:{id:"分类"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[_._v("#")]),_._v(" 分类")]),_._v(" "),i("ul",[i("li",[_._v("批处理操作系统、分时操作系统（轮流使用CPU工作片）、实时操作系统（快速响应）、网络操作系统、分布式操作系统（物理分散的计算机互联系统）、微机操作系统（windows）、嵌入式操作系统")])]),_._v(" "),i("h3",{attrs:{id:"嵌入式系统初始化过程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#嵌入式系统初始化过程"}},[_._v("#")]),_._v(" 嵌入式系统初始化过程")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("自底向上")])]),_._v(" "),i("li",[i("p",[_._v("硬件到软件的次序为")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("片级初始化->板级初始化->系统初始化")]),_._v(" "),i("p",[_._v("芯片级是微处理的初始化，板卡级时其他硬件设备初始化，系统级初始化时软件及操作系统初始化")])])])])]),_._v(" "),i("h3",{attrs:{id:"微内核操作系统"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#微内核操作系统"}},[_._v("#")]),_._v(" 微内核操作系统")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("系统分为用户态和内核态")]),_._v(" "),i("ul",[i("li",[i("img",{attrs:{src:l(613),alt:"image-20211011100836343"}})])])]),_._v(" "),i("li",[i("p",[_._v("单核")]),_._v(" "),i("ul",[i("li",[_._v("方便进程切换，但内核庞大，稳定性弱")])])]),_._v(" "),i("li",[i("p",[_._v("微内核")]),_._v(" "),i("ul",[i("li",[_._v("稳定性高，便于裁剪，但进程间切换消耗资源，效率低")])])])]),_._v(" "),i("h2",{attrs:{id:"文件管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#文件管理"}},[_._v("#")]),_._v(" 文件管理")]),_._v(" "),i("h3",{attrs:{id:"索引文件结构"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#索引文件结构"}},[_._v("#")]),_._v(" 索引文件结构")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("分类")]),_._v(" "),i("p",[_._v("块长为512B， 每个块号占3B， 一个物理块可放： 512/3=170个目录项， 也即：\n一个一级索引可存放的文件大小为： 170×512=87040B。\n一个二级索引可存放文件的大小为： 170×170×512=148×105B。\n一个三级索引可存放文件的大小为： 170×170×170×512=251×107B。")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("直接索引")]),_._v(" "),i("ul",[i("li",[_._v("存放的是内容")])])]),_._v(" "),i("li",[i("p",[_._v("一级间接索引")]),_._v(" "),i("ul",[i("li",[_._v("存放的是链接到物理盘块的地址")])])]),_._v(" "),i("li",[i("p",[_._v("二级索引")]),_._v(" "),i("ul",[i("li",[_._v("存放的是一级地址")])])])])])]),_._v(" "),i("h3",{attrs:{id:"文件和树形目录结构"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#文件和树形目录结构"}},[_._v("#")]),_._v(" 文件和树形目录结构")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("文件安全等级")]),_._v(" "),i("ul",[i("li",[_._v("系统安全（不允许未经授权的用户）、用户安全（指定用户分配访问权）、目录安全（与用户权限无关）、文件安全（与用户权限无关）")])])]),_._v(" "),i("li",[i("p",[_._v("树形结构")]),_._v(" "),i("ul",[i("li",[_._v("区分相对路径和绝对路径")])])]),_._v(" "),i("li",[i("p",[_._v("全文件名")]),_._v(" "),i("ul",[i("li",[_._v("等于绝对路径+文件名")])])]),_._v(" "),i("li",[i("p",[_._v("文件物理结构")]),_._v(" "),i("ul",[i("li",[_._v("连续结构、链接结构，索引结构。")])])]),_._v(" "),i("li",[i("p",[_._v("文件目录是文件控制块FCB（数据结构）的有序集合。")])]),_._v(" "),i("li",[i("p",[_._v("文件存取方式")]),_._v(" "),i("ul",[i("li",[_._v("顺序存取，随机存取、按键存取。")])])])]),_._v(" "),i("h3",{attrs:{id:"文件存储空闲空间管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#文件存储空闲空间管理"}},[_._v("#")]),_._v(" 文件存储空闲空间管理")]),_._v(" "),i("p",[_._v("外存空间管理的数据结构为磁盘分配表法。")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("空闲区表法")]),_._v(" "),i("ul",[i("li",[_._v("空闲空间整合成一张表，即空闲文件目录")])])]),_._v(" "),i("li",[i("p",[_._v("空闲链表法")]),_._v(" "),i("ul",[i("li",[_._v("空闲空间链接成一个链表，根据需要分配")])])]),_._v(" "),i("li",[i("p",[_._v("成组链接法")]),_._v(" "),i("ul",[i("li",[_._v("既分组，每个组内又链接成链表，上述方法综合")])])]),_._v(" "),i("li",[i("p",[_._v("位示图法")]),_._v(" "),i("p",[_._v("若系统的字长为32位， 磁盘上的物理块依次编号为： 0、 1、 2、 …， 那么4096号物理块的使用情况在位示图中的第____个字中描述。若磁盘的容量为200GB， 物理块的大小为1MB， 那么位示图的大小为____个字\n答：\n①（ 4096+1） /32等于128余1，为129\n② 200GB/1MB=200 ×1024个\n物理块， 需要200 ×1024位来表示， 因此位示图中字的个=200×1024/32=6400个")])]),_._v(" "),i("li",[i("p",[_._v("对每个物理空间用一位标识，为1则使用，为0则空闲")])])]),_._v(" "),i("h2",{attrs:{id:"进程管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#进程管理"}},[_._v("#")]),_._v(" 进程管理")]),_._v(" "),i("h3",{attrs:{id:"组成"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#组成"}},[_._v("#")]),_._v(" 组成")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("进程控制块PCB")]),_._v(" "),i("ul",[i("li",[_._v("唯一标志")])])]),_._v(" "),i("li",[i("p",[_._v("程序")]),_._v(" "),i("ul",[i("li",[_._v("描述进程要做什么")])])]),_._v(" "),i("li",[i("p",[_._v("数据")]),_._v(" "),i("ul",[i("li",[_._v("存放进程执行时所需数据")])])])]),_._v(" "),i("h3",{attrs:{id:"进程状态图"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#进程状态图"}},[_._v("#")]),_._v(" 进程状态图")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("作用")]),_._v(" "),i("ul",[i("li",[_._v("用于展现进程的状态，以及各种状态之间的转换")])])]),_._v(" "),i("li",[i("p",[_._v("常见模型")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("三态模型")]),_._v(" "),i("ul",[i("li",[_._v("系统自动控制时只有三种状态")]),_._v(" "),i("li",[i("img",{attrs:{src:l(614),alt:"image-20211011100851263"}})])])]),_._v(" "),i("li",[i("p",[_._v("五态模型")]),_._v(" "),i("ul",[i("li",[_._v("人为操作才会进入状态，活跃就绪即就绪，活跃阻塞即等待")]),_._v(" "),i("li",[i("img",{attrs:{src:l(615),alt:"image-20211011100859764"}})])])]),_._v(" "),i("li",[i("p",[_._v("七态模型")])])])])]),_._v(" "),i("h3",{attrs:{id:"前趋图和进程资源图"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#前趋图和进程资源图"}},[_._v("#")]),_._v(" 前趋图和进程资源图")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("前趋图")]),_._v(" "),i("ul",[i("li",[_._v("用来表示哪些任务可以并行执行，哪些任务之间有顺序关系")])])]),_._v(" "),i("li",[i("p",[_._v("进程资源图")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("用来表示进程和资源之间的分配和请求关系")])]),_._v(" "),i("li",[i("p",[_._v("P代表进程、R代表资源，R指向P表示R有资源已分配给P，P指向R表示P还需请求一个R资源才能执行")])]),_._v(" "),i("li",[i("p",[_._v("阻塞节点")]),_._v(" "),i("ul",[i("li",[_._v("某资源所请求的资源已全部分配完毕，无法获取所需资源，该进程阻塞无法继续")])])]),_._v(" "),i("li",[i("p",[_._v("非阻塞节点")]),_._v(" "),i("ul",[i("li",[_._v("某进程所请求资源还有剩余，可分配给该进程继续执行")])])]),_._v(" "),i("li",[i("p",[_._v("死锁")]),_._v(" "),i("ul",[i("li",[_._v("但所有进程都是阻塞节点时，即陷入死锁状态")])])]),_._v(" "),i("li",[i("p",[_._v("资源图化简方法")]),_._v(" "),i("ul",[i("li",[_._v("把不阻塞的进程所有边都去掉，形成孤立的点，再把分配给这个进程的资源回收，再看剩下进程哪些不阻塞，然后逐个变成孤立点，最后，所有资源和进程都变成孤立的点")])])])])])]),_._v(" "),i("h3",{attrs:{id:"进程间通信"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信"}},[_._v("#")]),_._v(" 进程间通信")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("同步和互斥")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("同步")]),_._v(" "),i("ul",[i("li",[_._v("表示两任务可同时执行，但速度上有差异，需速度上匹配，不存在资源是否单独或共享的问题")])])]),_._v(" "),i("li",[i("p",[_._v("互斥")]),_._v(" "),i("ul",[i("li",[_._v("表示一个资源在同一时间内只能由一个任务单独使用需要加锁，使用完后解锁才能被其他任务使用")])])]),_._v(" "),i("li",[i("p",[_._v("临界区")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("指进程对临界资源实施操作的那段程序，本质时一段程序代码")])]),_._v(" "),i("li",[i("p",[_._v("对互斥临界管理原则")]),_._v(" "),i("ul",[i("li",[_._v("有空即进、无空则等、有限等待、让权等待")])])])])])])]),_._v(" "),i("li",[i("p",[_._v("信号量机制")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("分类")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("同步信号量")]),_._v(" "),i("ul",[i("li",[_._v("对共享资源的访问控制，初值不定")])])]),_._v(" "),i("li",[i("p",[_._v("互斥信号量")]),_._v(" "),i("ul",[i("li",[_._v("对临界资源采用互斥访问，使用后其他进程无法访问，初始值为1")])])])])]),_._v(" "),i("li",[i("p",[_._v("PV操作")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("原子操作，用来解释进程间的同步和互斥原理")])]),_._v(" "),i("li",[i("p",[_._v("V操作")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("将某资源+1")]),_._v(" "),i("ul",[i("li",[_._v("若相加结果大于零，进程继续执行")]),_._v(" "),i("li",[_._v("若相加结果小于或等于零， 则唤醒一阻塞在该信号量上的进程， 然后再返回原进程继续执\n行或转进程调度")])])])])]),_._v(" "),i("li",[i("p",[_._v("P操作")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("先将某资源-1")]),_._v(" "),i("ul",[i("li",[_._v("若相减结果大于等于零， 则进程继续执行")]),_._v(" "),i("li",[_._v("若相减结果小于零， 则阻塞一个在该信号量上的进程， 然后再返回原进程继续执行或转进\n程调度")])])])])])])])])])]),_._v(" "),i("h3",{attrs:{id:"进程调度"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#进程调度"}},[_._v("#")]),_._v(" 进程调度")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("定义")]),_._v(" "),i("ul",[i("li",[_._v("指当有更高优先级的进程到来时如何分配CPU")])])]),_._v(" "),i("li",[i("p",[_._v("三级调度")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("高级调度")]),_._v(" "),i("ul",[i("li",[_._v("又称长调度或作业调度，决定哪个作业可调入系统中")])])]),_._v(" "),i("li",[i("p",[_._v("中级调度")]),_._v(" "),i("ul",[i("li",[_._v("又称对换调度，决定哪个就绪进程可以调入内存中")])])]),_._v(" "),i("li",[i("p",[_._v("低级调度")]),_._v(" "),i("ul",[i("li",[_._v("又称进程调度，决定内存中哪个就绪进程可以占用CPU")])])])])]),_._v(" "),i("li",[i("p",[_._v("调度算法")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("先来先服务FCFS")]),_._v(" "),i("ul",[i("li",[_._v("先到达进程优先分配CPU。用于宏观调度")])])]),_._v(" "),i("li",[i("p",[_._v("时间片轮转")]),_._v(" "),i("ul",[i("li",[_._v("分配每个进程CPU时间片，轮流使用CPU，每个进程时间大小相同。用户魏观调度")])])]),_._v(" "),i("li",[i("p",[_._v("优先级调度")]),_._v(" "),i("ul",[i("li",[_._v("每个进程都有一个优先级，优先级大的先分配CPU")])])]),_._v(" "),i("li",[i("p",[_._v("多级反馈调度")]),_._v(" "),i("ul",[i("li",[_._v("时间片轮转和优先级调度相结合")])])])])]),_._v(" "),i("li",[i("p",[_._v("死锁问题")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("定义")]),_._v(" "),i("ul",[i("li",[_._v("两个以上的进程都要求对方已经占有的资源导致无法继续运行下去的现象")])])]),_._v(" "),i("li",[i("p",[_._v("产生的四个必要条件")]),_._v(" "),i("ul",[i("li",[_._v("资源互斥，每个进程占有的资源并等待其他资源、系统不能剥夺进程资源、进程资源图是一个环路")])])]),_._v(" "),i("li",[i("p",[_._v("打破四大条件")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("死锁预防")]),_._v(" "),i("ul",[i("li",[_._v("限制并发进程对资源的请求")])])]),_._v(" "),i("li",[i("p",[_._v("死锁避免")]),_._v(" "),i("ul",[i("li",[_._v("采用银行家算法避免，提前计算出一条不会死锁的资源分配方法，分配资源，否则不分配资源")])])]),_._v(" "),i("li",[i("p",[_._v("死锁检测")]),_._v(" "),i("ul",[i("li",[_._v("允许死锁产生，当系统定时运行一个检测死锁程序，若检测到，则设法加以解除")])])]),_._v(" "),i("li",[i("p",[_._v("死锁资源计算")]),_._v(" "),i("ul",[i("li",[_._v("系统内n个进程，每个进程需要R资源，\n那么发生死锁的最大资源数为n*(R-1)，\n不发生死锁的最小资源数为n*(R-1)+1")])])])])])])])]),_._v(" "),i("h3",{attrs:{id:"进程和线程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[_._v("#")]),_._v(" 进程和线程")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("进程属性")]),_._v(" "),i("ul",[i("li",[_._v("可拥有资源的独立单位，最小单位")]),_._v(" "),i("li",[_._v("可独立调度和分配的基本单位")])])]),_._v(" "),i("li",[i("p",[_._v("线程属性")]),_._v(" "),i("ul",[i("li",[_._v("是独立调度的最小单位")]),_._v(" "),i("li",[_._v("可共享进程的公共数据、全局变量、代码、文件等资源，但不能共享线程独有资源，如线程栈指针等标识数据")])])])]),_._v(" "),i("h2",{attrs:{id:"存储管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#存储管理"}},[_._v("#")]),_._v(" 存储管理")]),_._v(" "),i("h3",{attrs:{id:"存储器结构"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#存储器结构"}},[_._v("#")]),_._v(" 存储器结构")]),_._v(" "),i("ul",[i("li",[_._v("寄存器--高速缓存Cache--主存--外存")])]),_._v(" "),i("h3",{attrs:{id:"地址重定位"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#地址重定位"}},[_._v("#")]),_._v(" 地址重定位")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("定义")]),_._v(" "),i("ul",[i("li",[_._v("将逻辑地址转换为主存物理地址的过程")])])]),_._v(" "),i("li",[i("p",[_._v("分类")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("静态重定位")]),_._v(" "),i("ul",[i("li",[_._v("在程序装入主存时完成转换")])])]),_._v(" "),i("li",[i("p",[_._v("动态重定位")]),_._v(" "),i("ul",[i("li",[_._v("边运行边转换")])])])])])]),_._v(" "),i("h3",{attrs:{id:"分区存储管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分区存储管理"}},[_._v("#")]),_._v(" 分区存储管理")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("定义")]),_._v(" "),i("ul",[i("li",[_._v("将某进程运行所需的内存整体一起分配，再执行")])])]),_._v(" "),i("li",[i("p",[_._v("分类")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("固定分区（静态）")]),_._v(" "),i("ul",[i("li",[_._v("主存分若干固定分区，将运行作业装配进去")]),_._v(" "),i("li",[_._v("分区固定，大小和作业需要大小不同，会产生内部碎片")])])]),_._v(" "),i("li",[i("p",[_._v("可变分区（动态）")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("定义")]),_._v(" "),i("ul",[i("li",[_._v("主存空间分区时在作业转入时划分，正好划分为作业需要的大小，不存在内部碎片，")]),_._v(" "),i("li",[_._v("容易将主存空间切割成许多块，产生外部碎片")])])]),_._v(" "),i("li",[i("p",[_._v("算法")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("首次适应法")]),_._v(" "),i("ul",[i("li",[_._v("按内存地址顺序从头查找")])])]),_._v(" "),i("li",[i("p",[_._v("最佳适应法")]),_._v(" "),i("ul",[i("li",[_._v("将内存中空闲内存块从小到大排序")])])]),_._v(" "),i("li",[i("p",[_._v("最差适应法")]),_._v(" "),i("ul",[i("li",[_._v("将内存中空闲块最大的")]),_._v(" "),i("li",[_._v("预防系统中产生过多细小空闲块")])])]),_._v(" "),i("li",[i("p",[_._v("循环首次适应法")]),_._v(" "),i("ul",[i("li",[_._v("按内存地址顺序查找，不每次从头查找")])])]),_._v(" "),i("li",[i("p",[_._v("可重定位分区")]),_._v(" "),i("ul",[i("li",[_._v("解决碎片问题，移动已经分配好区域，使其成为连续区域")])])])])])])])])]),_._v(" "),i("li",[i("p",[_._v("缺点")]),_._v(" "),i("ul",[i("li",[_._v("但进程运行所需内存大于系统内存时，就无法将整个进程一起调入内存")])])])]),_._v(" "),i("h3",{attrs:{id:"页式存储管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#页式存储管理"}},[_._v("#")]),_._v(" 页式存储管理")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("解决空间极大的进程运行问题")])]),_._v(" "),i("li",[i("p",[_._v("优点")]),_._v(" "),i("ul",[i("li",[_._v("利用率高，碎片小，分配及管理简单")])])]),_._v(" "),i("li",[i("p",[_._v("缺点")]),_._v(" "),i("ul",[i("li",[_._v("增加系统开销，可能产生抖动现象")])])]),_._v(" "),i("li",[i("p",[_._v("逻辑页")]),_._v(" "),i("ul",[i("li",[_._v("页号|页内地址（物理偏移地址）")]),_._v(" "),i("li",[i("img",{attrs:{src:l(616),alt:"image-20211104145654065"}})])])]),_._v(" "),i("li",[i("p",[_._v("页表")]),_._v(" "),i("ul",[i("li",[_._v("页号与物理块号并非按序对应，需查询页表，逻辑页号对应物理块号")])])])]),_._v(" "),i("h3",{attrs:{id:"快表"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#快表"}},[_._v("#")]),_._v(" 快表")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("定义")]),_._v(" "),i("ul",[i("li",[_._v("本质也是页表，只是页表的存储位置在Cache中")])])]),_._v(" "),i("li",[i("p",[_._v("可快速知道逻辑页号对应的物理地址，加快转化速度")])])]),_._v(" "),i("h3",{attrs:{id:"段式存储管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#段式存储管理"}},[_._v("#")]),_._v(" 段式存储管理")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("定义")]),_._v(" "),i("ul",[i("li",[_._v("将进程空间分配成一个段，每个段有段号和段内地址")]),_._v(" "),i("li",[_._v("每段物理大小不同，分段式根据逻辑整体结构分段")]),_._v(" "),i("li",[i("img",{attrs:{src:l(617),alt:"image-20211104150415286"}})])])]),_._v(" "),i("li",[i("p",[_._v("段表")]),_._v(" "),i("ul",[i("li",[_._v("有段表和基址两个属性，才能确定一个逻辑段在物理段的位置")])])]),_._v(" "),i("li",[i("p",[_._v("与页式区别")]),_._v(" "),i("ul",[i("li",[_._v("分页式根据物理空间划分，每页大小相同；分段式根据逻辑结构划分，每段是完整功能，便于共享，但大小不同")])])])]),_._v(" "),i("h3",{attrs:{id:"段页式存储管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#段页式存储管理"}},[_._v("#")]),_._v(" 段页式存储管理")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("对进程空间先分段，后分页")])]),_._v(" "),i("li",[i("p",[i("img",{attrs:{src:l(618),alt:"image-20211104150523096"}})])]),_._v(" "),i("li",[i("p",[_._v("优点")]),_._v(" "),i("ul",[i("li",[_._v("空间浪费小，存储共享容易，保护容易，能动态连接")])])]),_._v(" "),i("li",[i("p",[_._v("缺点")]),_._v(" "),i("ul",[i("li",[_._v("复杂性和开销增加，需要硬件及占用内容增加，故执行速度大大下降")])])])]),_._v(" "),i("h3",{attrs:{id:"虚拟存储管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#虚拟存储管理"}},[_._v("#")]),_._v(" 虚拟存储管理")]),_._v(" "),i("h4",{attrs:{id:"页面置换算法"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#页面置换算法"}},[_._v("#")]),_._v(" 页面置换算法")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("缺页")]),_._v(" "),i("ul",[i("li",[_._v("表示要执行的页不在内存物理中，需从外部调入内存，增加执行时间。")]),_._v(" "),i("li",[_._v("缺页越多，系统执行效率越低")]),_._v(" "),i("li",[_._v("在淘汰页面时， 应选择页帧号最大的进行淘汰")])])]),_._v(" "),i("li",[i("p",[_._v("算法")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("最优算法OPT")]),_._v(" "),i("ul",[i("li",[_._v("理论上的，原理是选择未来最长时间内不被访问的页面置换")])])]),_._v(" "),i("li",[i("p",[_._v("先进先出算法FIFO")]),_._v(" "),i("ul",[i("li",[_._v("先调入内存的页先置换淘汰")]),_._v(" "),i("li",[_._v("产生抖动现象，分配的页数越多，缺页率越多")])])]),_._v(" "),i("li",[i("p",[_._v("最近最少使用LRU")]),_._v(" "),i("ul",[i("li",[_._v("过去最少使用的页面被置换淘汰")]),_._v(" "),i("li",[_._v("效率高，不产生抖动现象")])])]),_._v(" "),i("li",[i("p",[_._v("淘汰原则")]),_._v(" "),i("ul",[i("li",[_._v("优先淘汰最近未访问的，而后淘汰最近被修改的页面")])])])])])]),_._v(" "),i("h2",{attrs:{id:"设备管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#设备管理"}},[_._v("#")]),_._v(" 设备管理")]),_._v(" "),i("h3",{attrs:{id:"分类方式"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分类方式"}},[_._v("#")]),_._v(" 分类方式")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("按数据组织分类")]),_._v(" "),i("ul",[i("li",[_._v("块设备、字符设备")])])]),_._v(" "),i("li",[i("p",[_._v("资源分配角度")]),_._v(" "),i("ul",[i("li",[_._v("独占设备、共享设备、虚拟设备")])])]),_._v(" "),i("li",[i("p",[_._v("数据传输速率")]),_._v(" "),i("ul",[i("li",[_._v("低速、中速、高速设备")])])])]),_._v(" "),i("h3",{attrs:{id:"i-o控制"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#i-o控制"}},[_._v("#")]),_._v(" I/O控制")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("I/O设备管理软件所有层次及每一层功能")]),_._v(" "),i("ul",[i("li",[i("img",{attrs:{src:l(619),alt:"image-20211011100934447"}})])])]),_._v(" "),i("li",[i("p",[_._v("采用DMA方式，可使设备与主存间的数据块传送不需要CPU干预")])])]),_._v(" "),i("h3",{attrs:{id:"dma"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#dma"}},[_._v("#")]),_._v(" DMA")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("实现DMA传送的基本操作")]),_._v(" "),i("p",[_._v("实现DMA传送的基本操作如下：\n（ 1） 外设可通过DMA控制器向CPU发出DMA请求：\n（ 2） CPU响应DMA请求， 系统转变为DMA工作方式， 并把总线控制权交给DMA控制器；\n（ 3） 由DMA控制器发送存储器地址， 并决定传送数据块的长度；\n（ 4） 执行DMA传送；\n（ 5） DMA操作结束， 并把总线控制权交还CPU")])])]),_._v(" "),i("h3",{attrs:{id:"虚设备和spooling技术"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#虚设备和spooling技术"}},[_._v("#")]),_._v(" 虚设备和SPOOLING技术")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("采用SPOOLING技术")]),_._v(" "),i("ul",[i("li",[_._v("在外设上建立两个数据缓冲区，分为输入井和输出井")])])]),_._v(" "),i("li",[i("p",[_._v("利用磁盘设备提供虚拟设备")])])]),_._v(" "),i("h3",{attrs:{id:"磁盘调度"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#磁盘调度"}},[_._v("#")]),_._v(" 磁盘调度")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("磁盘结构和参数")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("每个盘面有多个同心圆，每个同心圆是一个磁道，每个同心圆又划分多个扇区，数据放在扇区")]),_._v(" "),i("ul",[i("li",[_._v("柱面号->扇区号->磁头号")])])]),_._v(" "),i("li",[i("p",[_._v("寻道时间")]),_._v(" "),i("ul",[i("li",[_._v("指磁头移到到磁道所需时间")])])]),_._v(" "),i("li",[i("p",[_._v("等待时间")]),_._v(" "),i("ul",[i("li",[_._v("等待读写扇区转到磁头下方所用时间")])])]),_._v(" "),i("li",[i("p",[_._v("存取时间")]),_._v(" "),i("ul",[i("li",[_._v("寻道时间+等待时间")])])])])]),_._v(" "),i("li",[i("p",[_._v("调度算法")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("先来先服务FCFS")]),_._v(" "),i("ul",[i("li",[_._v("根据进程请求访问磁盘的先后顺序")])])]),_._v(" "),i("li",[i("p",[_._v("最短寻道时间优先SSTF")]),_._v(" "),i("ul",[i("li",[_._v("远处进程可能永远无法访问")]),_._v(" "),i("li",[_._v("根据请求访问的磁道与当前磁道最近的进程优先调度")])])]),_._v(" "),i("li",[i("p",[_._v("扫描算法SCAN")]),_._v(" "),i("ul",[i("li",[_._v("磁头在磁盘双向移到，选择离磁头当前所在磁道最近的请求访问磁道，且与磁头移到方向一致（里到外，外到里）")])])]),_._v(" "),i("li",[i("p",[_._v("单向扫描调度算法CSCAN")]),_._v(" "),i("ul",[i("li",[_._v("磁头是单向移动的， 也就是当磁头从内向外移动到最外面时， 磁头放到最内， 然后再从内向外扫描")])])])])]),_._v(" "),i("li",[i("p",[_._v("磁盘冗余阵列技术RAID")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("RAID0")]),_._v(" "),i("ul",[i("li",[_._v("没有提供冗余和错误修复技术")])])]),_._v(" "),i("li",[i("p",[_._v("RAID1")]),_._v(" "),i("ul",[i("li",[_._v("在成对的独立磁盘上产生互为备份的数据，提供读取性能")])])]),_._v(" "),i("li",[i("p",[_._v("RAID2")]),_._v(" "),i("ul",[i("li",[_._v("将数据条块化的分布于不同硬盘上，并使用海明码校验")])])]),_._v(" "),i("li",[i("p",[_._v("RAID3")]),_._v(" "),i("ul",[i("li",[_._v("使用奇偶校验，并用单块磁盘存储奇偶校验信息")])])]),_._v(" "),i("li",[i("p",[_._v("RAID5")]),_._v(" "),i("ul",[i("li",[_._v("在所有磁盘上交叉的存储数据及奇偶校验信息")])])])])])]),_._v(" "),i("h2",{attrs:{id:"作业管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#作业管理"}},[_._v("#")]),_._v(" 作业管理")]),_._v(" "),i("h3",{attrs:{id:"作业四种状态"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#作业四种状态"}},[_._v("#")]),_._v(" 作业四种状态")]),_._v(" "),i("ul",[i("li",[_._v("提交、后备、执行（作业调入系统中执行，与进程执行状态类似）、完成")]),_._v(" "),i("li",[i("img",{attrs:{src:l(620),alt:"image-20211011101033802"}})])]),_._v(" "),i("h3",{attrs:{id:"作业调度算法"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#作业调度算法"}},[_._v("#")]),_._v(" 作业调度算法")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("优先级")]),_._v(" "),i("ul",[i("li",[_._v("按优先级决定执行哪个作业")])])]),_._v(" "),i("li",[i("p",[_._v("先来先服务FCFS")]),_._v(" "),i("ul",[i("li",[_._v("先来先执行")])])]),_._v(" "),i("li",[i("p",[_._v("短作业有限SJF")]),_._v(" "),i("ul",[i("li",[_._v("按作业时间长度决定，运行短优先执行")])])]),_._v(" "),i("li",[i("p",[_._v("响应比高者优先HRN")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("响应公式")]),_._v(" "),i("ul",[i("li",[_._v("(等待时间+运行时间)/运行时间")])])]),_._v(" "),i("li",[i("p",[_._v("响应高者优先执行")])])])]),_._v(" "),i("li",[i("p",[_._v("定时轮转")]),_._v(" "),i("ul",[i("li",[_._v("时间片轮转，定义以CPU时间片长度，作业执行完这个长度就停止等待，直到轮到")])])])]),_._v(" "),i("h3",{attrs:{id:"作业周转时间"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#作业周转时间"}},[_._v("#")]),_._v(" 作业周转时间")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("单个作业的周转时间")]),_._v(" "),i("ul",[i("li",[_._v("作业进入系统时间点-作业执行完的时间点")]),_._v(" "),i("li",[_._v("或作业的等待时间+作业执行时间")])])]),_._v(" "),i("li",[i("p",[_._v("作业平均周转时间")]),_._v(" "),i("ul",[i("li",[_._v("所有作业的周转时间/作业总个数")])])]),_._v(" "),i("li",[i("p",[_._v("单个作业的带权周转时间")]),_._v(" "),i("ul",[i("li",[_._v("作业的周转时间/作业的实际运行时间")])])]),_._v(" "),i("li",[i("p",[_._v("作业平均带权周转时间")]),_._v(" "),i("ul",[i("li",[_._v("所有作业的带权周转时间和/作业总个数")])])])])])}),[],!1,null,null,null);v.default=a.exports}}]);