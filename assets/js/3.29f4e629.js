(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{758:function(t,_,v){t.exports=v.p+"assets/img/image-20211008095936408-16372870051021.a8ff12a0.png"},759:function(t,_,v){t.exports=v.p+"assets/img/image-20220121154742967.4c0c5fcf.png"},760:function(t,_,v){t.exports=v.p+"assets/img/image-20220121163249494.3308a272.png"},761:function(t,_,v){t.exports=v.p+"assets/img/image-20220121164159485.521b2e0c.png"},762:function(t,_,v){t.exports=v.p+"assets/img/image-20220121164240990.c3cf322d.png"},763:function(t,_,v){t.exports=v.p+"assets/img/image-20220121164259606.46586c09.png"},764:function(t,_,v){t.exports=v.p+"assets/img/image-20220201212310911.c12d3241.png"},765:function(t,_,v){t.exports=v.p+"assets/img/image-20220121172609816.663e4328.png"},766:function(t,_,v){t.exports=v.p+"assets/img/image-20220124115057071.fd02f92e.png"},767:function(t,_,v){t.exports=v.p+"assets/img/image-20220124145818810.f5cacb01.png"},768:function(t,_,v){t.exports=v.p+"assets/img/image-20220124150127910.5add96fa.png"},769:function(t,_,v){t.exports=v.p+"assets/img/image-20220124155002288.d601945f.png"},770:function(t,_,v){t.exports=v.p+"assets/img/image-20220124160652469.da96e18b.png"},771:function(t,_,v){t.exports=v.p+"assets/img/image-20220124160837677.35548088.png"},772:function(t,_,v){t.exports=v.p+"assets/img/image-20220121154321476.b2bd86a4.png"},773:function(t,_,v){t.exports=v.p+"assets/img/image-20220125131832278.eea88467.png"},774:function(t,_,v){t.exports=v.p+"assets/img/image-20220125132547639.765e64cf.png"},775:function(t,_,v){t.exports=v.p+"assets/img/image-20220125133547538.571bc1d1.png"},776:function(t,_,v){t.exports=v.p+"assets/img/image-20220125134059057.cf12bc8a.png"},777:function(t,_,v){t.exports=v.p+"assets/img/image-20220125135017862.b6292f2d.png"},778:function(t,_,v){t.exports=v.p+"assets/img/image-20220125144032383.68d60661.png"},779:function(t,_,v){t.exports=v.p+"assets/img/image-20220130002500126.e6a49534.png"},780:function(t,_,v){t.exports=v.p+"assets/img/image-20220130002911230.aa55f4db.png"},781:function(t,_,v){t.exports=v.p+"assets/img/image-20220130003328475.7dc4deef.png"},782:function(t,_,v){t.exports=v.p+"assets/img/image-20220130003645870.6775ff31.png"},783:function(t,_,v){t.exports=v.p+"assets/img/image-20220130003751707.47d00d7e.png"},784:function(t,_,v){t.exports=v.p+"assets/img/image-20220130003911225.0a593a98.png"},785:function(t,_,v){t.exports=v.p+"assets/img/F71O4.a4ad24a6.png"},786:function(t,_,v){t.exports=v.p+"assets/img/image-20220203133101960.25081bb3.png"},787:function(t,_,v){t.exports=v.p+"assets/img/image-20220203133830656.636999fa.png"},788:function(t,_,v){t.exports=v.p+"assets/img/image-20220203133939668.561bd5e2.png"},789:function(t,_,v){t.exports=v.p+"assets/img/image-20220126094907885.18602bcf.png"},790:function(t,_,v){t.exports=v.p+"assets/img/image-20220126105723901.9d4db0bc.png"},791:function(t,_,v){t.exports=v.p+"assets/img/image-20220126111755789.8202f2d9.png"},792:function(t,_,v){t.exports=v.p+"assets/img/image-20220126112410338.9d4db0bc.png"},793:function(t,_,v){t.exports=v.p+"assets/img/image-20220126112755321.0b618554.png"},794:function(t,_,v){t.exports=v.p+"assets/img/image-20220126112835869.ec3bde6a.png"},795:function(t,_,v){t.exports=v.p+"assets/img/image-20220127230742897.cca6863b.png"},796:function(t,_,v){t.exports=v.p+"assets/img/image-20220127231255350.8a5bf9e1.png"},797:function(t,_,v){t.exports=v.p+"assets/img/image-20220127231328708.3a91f52f.png"},798:function(t,_,v){t.exports=v.p+"assets/img/image-20220127231353364.eccd781c.png"},799:function(t,_,v){t.exports=v.p+"assets/img/image-20220127233411703.3206d8a4.png"},800:function(t,_,v){t.exports=v.p+"assets/img/image-20220127234622593.f26c7122.png"},801:function(t,_,v){t.exports=v.p+"assets/img/image-20220128000329047.73af1a93.png"},802:function(t,_,v){t.exports=v.p+"assets/img/image-20220128000403415.883f314b.png"},803:function(t,_,v){t.exports=v.p+"assets/img/image-20220128000440120.f26c7122.png"},804:function(t,_,v){t.exports=v.p+"assets/img/image-20220128000733541.9828bc5b.png"},805:function(t,_,v){t.exports=v.p+"assets/img/image-20220129230432308.0bcdc607.png"},806:function(t,_,v){t.exports=v.p+"assets/img/image-20220129231851972.ae8113b1.png"},807:function(t,_,v){t.exports=v.p+"assets/img/image-20220129225825121.1125090d.png"},808:function(t,_,v){t.exports=v.p+"assets/img/image-20220129231552125.5864c8eb.png"},809:function(t,_,v){t.exports=v.p+"assets/img/image-20220129231750390.77f4137d.png"},810:function(t,_,v){t.exports=v.p+"assets/img/image-20220130000933923.ee185434.png"},811:function(t,_,v){t.exports=v.p+"assets/img/640tcp.107e2d3d.png"},812:function(t,_,v){t.exports=v.p+"assets/img/image-20220121162000820.b8975079.png"},813:function(t,_,v){t.exports=v.p+"assets/img/image-20220124161610624.621cb98d.png"},814:function(t,_,v){t.exports=v.p+"assets/img/image-20220124161736005.13c33f65.png"},815:function(t,_,v){t.exports=v.p+"assets/img/image-20220125111752767.99516c4e.png"},816:function(t,_,v){t.exports=v.p+"assets/img/image-20220125111536844.c76a04e6.png"},817:function(t,_,v){t.exports=v.p+"assets/img/image-20220125112314477.80b7cb0f.png"},857:function(t,_,v){"use strict";v.r(_);var s=v(12),a=Object(s.a)({},(function(){var t=this,_=t.$createElement,s=t._self._c||_;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#字节序"}},[t._v("字节序？")])]),s("li",[s("a",{attrs:{href:"#tcp"}},[t._v("TCP")])]),s("li",[s("a",{attrs:{href:"#udp"}},[t._v("UDP")])]),s("li",[s("a",{attrs:{href:"#ping-icmp"}},[t._v("Ping / ICMP")])]),s("li",[s("a",{attrs:{href:"#http"}},[t._v("HTTP")])]),s("li",[s("a",{attrs:{href:"#其他"}},[t._v("其他")])])])]),s("p"),t._v(" "),s("h1",{attrs:{id:"网络编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络编程"}},[t._v("#")]),t._v(" 网络编程")]),t._v(" "),s("h2",{attrs:{id:"字节序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字节序"}},[t._v("#")]),t._v(" 字节序？")]),t._v(" "),s("h3",{attrs:{id:"什么是大端字节-什么是小端字节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是大端字节-什么是小端字节"}},[t._v("#")]),t._v(" 什么是大端字节，什么是小端字节？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("大端序（"),s("code",[t._v("Big-Endian")]),t._v("）网络字节序，"),s("font",{attrs:{color:"cornflowerblue"}},[t._v("将数据的低位字节存放在内存的高位地址，高位字节存放在低位地址")]),t._v("。这种排列方式与数据用字节表示时的书写顺序一致，符合人类的阅读习惯。")],1)]),t._v(" "),s("li",[s("p",[t._v("小端序（"),s("code",[t._v("Little-Endian")]),t._v("）主机字节序，"),s("font",{attrs:{color:"cornflowerblue"}},[t._v("将多位数的低位放在较小的地址处，高位放在较大的地址处")]),t._v("。小端序与人类的阅读习惯相反，但更符合计算机读取内存的方式，因为CPU读取内存中的数据时，是从低地址向高地址方向进行读取的。")],1)])]),t._v(" "),s("h3",{attrs:{id:"为何要有字节序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为何要有字节序"}},[t._v("#")]),t._v(" 为何要有字节序？")]),t._v(" "),s("p",[t._v("很多人会问，为什么会有字节序，统一用大端序不行吗？答案是，计算机电路先处理低位字节，效率比较高，因为计算都是从低位开始的。所以，"),s("font",{attrs:{color:"cornflowerblue"}},[t._v("计算机的内部处理都是小端字节序。在计算机内部，小端序被广泛应用于现代 CPU 内部存储数据；而在其他场景，比如网络传输和文件存储则使用大端序")]),t._v("。")],1),t._v(" "),s("h3",{attrs:{id:"如何判断字节序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何判断字节序"}},[t._v("#")]),t._v(" 如何判断字节序？")]),t._v(" "),s("p",[s("strong",[t._v("① 通过强转的方式, 判断返回值")])]),t._v(" "),s("p",[t._v("int型强制转化成char型，int型是4字节，char型是1字节，于是int型数据的高3字节被截断。")]),t._v(" "),s("p",[s("img",{attrs:{src:v(758),alt:"image-20211008095936408"}})]),t._v(" "),s("p",[s("strong",[t._v("② 通过使用联合( 共用体 )的方式判断")])]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//方法一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("check_sys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//大端返回0，小端返回1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//方法二")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("check_sys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("un"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    un"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" un"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//大端返回0，小端返回1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("check_sys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小端"')]),t._v("\\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"大端"')]),t._v("\\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br")])]),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Linux提供了4个函数来完成主机字节序和网络字节序之间的转换")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("＜netinet"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h＞")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("htonl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hostlong"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("htons")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hostshort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ntohl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" netlong"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ntohs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" netshort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("网络分层模型")]),t._v(" "),s("p",[t._v("七层")]),t._v(" "),s("p",[t._v("交换机在哪一层")]),t._v(" "),s("p",[t._v("四层")]),t._v(" "),s("p",[t._v("网络编程连接方式")]),t._v(" "),s("p",[t._v("怎么保证客户端与服务端在突然断网的情况下保证另一端知道")]),t._v(" "),s("p",[t._v("饱和机制、心跳机制、看门狗机制")]),t._v(" "),s("p",[t._v("以太网的了解")]),t._v(" "),s("p",[t._v("在局域网中怎么连接两台电脑")]),t._v(" "),s("p",[t._v("socket 阻塞和非阻塞的区别")]),t._v(" "),s("h2",{attrs:{id:"tcp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[t._v("#")]),t._v(" TCP")]),t._v(" "),s("p",[s("strong",[t._v("参考：")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/fQ7xfnCUVRyw1JCgQ1zASQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux性能优化实践 - 传输层基本原理及故障分析"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&mid=2247484005&idx=1&sn=cb07ee1c891a7bdd0af3859543190202&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP 三次握手和四次挥手面试题"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/Tc09ovdNacOtnMOMeRc_uA",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP 重传、滑动窗口、流量控制、拥塞控制"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"tcp基本认识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp基本认识"}},[t._v("#")]),t._v(" TCP基本认识")]),t._v(" "),s("h4",{attrs:{id:"头部格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#头部格式"}},[t._v("#")]),t._v(" 头部格式")]),t._v(" "),s("ul",[s("li",[t._v("序列号\n"),s("ul",[s("li",[t._v("在建立连接时由计算机生成的随机数作为其初始值，通过 SYN 包传给接收端主机，每发送一次数据，就「累加」一次该「数据字节数」的大小。"),s("strong",[t._v("用来解决网络包乱序问题")]),t._v("。")])])]),t._v(" "),s("li",[t._v("确定应答号\n"),s("ul",[s("li",[t._v("指下一次「期望」收到的数据的序列号，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收。"),s("strong",[t._v("用来解决不丢包的问题")]),t._v("。")])])]),t._v(" "),s("li",[t._v("控制位\n"),s("ul",[s("li",[t._v("ACK：该位为1时，「确认应答」的字段变为有效，TCP规定除最初建立连接时的SYN包之外该位必须设置为1 。")]),t._v(" "),s("li",[t._v("RST：该位为1时，表示TCP连接中出现异常必须强制断开连接。")]),t._v(" "),s("li",[t._v("SYC：该位为1时，表示希望建立连，并在其「序列号」的字段进行序列号初始值的设定。")]),t._v(" "),s("li",[t._v("FIN：该位为 "),s("code",[t._v("1")]),t._v(" 时，表示今后不会再有数据发送，希望断开连接。当通信结束希望断开连接时，通信双方的主机之间就可以相互交换 "),s("code",[t._v("FIN")]),t._v(" 位置为 1 的 TCP 段。")])])]),t._v(" "),s("li",[s("img",{attrs:{src:v(759),alt:"image-20220121154742967"}})])]),t._v(" "),s("h4",{attrs:{id:"为什么需要tcp协议-tcp工作在哪一层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要tcp协议-tcp工作在哪一层"}},[t._v("#")]),t._v(" 为什么需要TCP协议？TCP工作在哪一层？")]),t._v(" "),s("ul",[s("li",[t._v("IP层是不可靠的，它不保证网络包的交付、不保证网络包的按序交付、也不保证网络包中的数据的完整性。")]),t._v(" "),s("li",[t._v("因为TCP是一个工作在"),s("strong",[t._v("传输层")]),t._v("的"),s("strong",[t._v("可靠")]),t._v("数据传输的服务，它能确保接收端接收的网络包是无损坏、无间隔、非冗余和按序的。")])]),t._v(" "),s("h4",{attrs:{id:"什么是tcp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是tcp"}},[t._v("#")]),t._v(" 什么是TCP ？")]),t._v(" "),s("ul",[s("li",[t._v("TCP 是"),s("strong",[t._v("面向连接的、可靠的、基于字节流")]),t._v("的传输层通信协议。\n"),s("ul",[s("li",[s("strong",[t._v("面向连接")]),t._v("：一定是「一对一」才能连接，不能像 UDP 协议 可以一个主机同时向多个主机发送消息，也就是一对多是无法做到的；")]),t._v(" "),s("li",[s("strong",[t._v("可靠的")]),t._v("：无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端；")]),t._v(" "),s("li",[s("strong",[t._v("字节流")]),t._v("：消息是「没有边界」的，所以无论我们消息有多大都可以进行传输。并且消息是「有序的」，当「前一个」消息没有收到的时候，即使它先收到了后面的字节已经收到，那么也不能扔给应用层去处理，同时对「重复」的报文会自动丢弃。")])])])]),t._v(" "),s("h4",{attrs:{id:"什么是tcp连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是tcp连接"}},[t._v("#")]),t._v(" 什么是TCP连接？")]),t._v(" "),s("ul",[s("li",[t._v("简单来说就是，用于保证可靠性和流量控制维护的某些状态信息，这些信息的组合，包括Socket、序列号和窗口大小称为连接。")]),t._v(" "),s("li",[t._v("所以我们可以知道，建立一个 TCP 连接是需要客户端与服务器端达成上述三个信息的共识。\n"),s("ul",[s("li",[s("strong",[t._v("Socket")]),t._v("：由 IP 地址和端口号组成；")]),t._v(" "),s("li",[s("strong",[t._v("序列号")]),t._v("：用来解决乱序问题等；")]),t._v(" "),s("li",[s("strong",[t._v("窗口大小")]),t._v("：用来做流量控制；")])])])]),t._v(" "),s("h4",{attrs:{id:"如何唯一确定一个tcp连接呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何唯一确定一个tcp连接呢"}},[t._v("#")]),t._v(" 如何唯一确定一个TCP连接呢？")]),t._v(" "),s("ul",[s("li",[t._v("TCP 四元组可以唯一的确定一个连接，四元组包括如下：\n"),s("ul",[s("li",[t._v("源地址")]),t._v(" "),s("li",[t._v("源端口")]),t._v(" "),s("li",[t._v("目的地址")]),t._v(" "),s("li",[t._v("目的端口")])])]),t._v(" "),s("li",[t._v("源地址和目的地址的字段（32位）是在 IP 头部中，作用是通过 IP 协议发送报文给对方主机。")]),t._v(" "),s("li",[t._v("源端口和目的端口的字段（16位）是在 TCP 头部中，作用是告诉 TCP 协议应该把报文发给哪个进程。")])]),t._v(" "),s("h4",{attrs:{id:"有一个-ip-的服务器监听了一个端口-它的-tcp-的最大连接数是多少"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有一个-ip-的服务器监听了一个端口-它的-tcp-的最大连接数是多少"}},[t._v("#")]),t._v(" 有一个 IP 的服务器监听了一个端口，它的 TCP 的最大连接数是多少？")]),t._v(" "),s("ul",[s("li",[t._v("服务器通常固定在某个本地端口上监听，等待客户端的连接请求。因此，客户端 IP 和 端口是可变的，其理论值计算公式如下：\n"),s("ul",[s("li",[s("strong",[t._v("最大TCP连接数 = 客户端的IP数 x 客户端的端口数")])])])]),t._v(" "),s("li",[t._v("当然，服务端最大并发 TCP 连接数远不能达到理论上限。\n"),s("ul",[s("li",[t._v("首先主要是"),s("strong",[t._v("文件描述符限制")]),t._v("，Socket 都是文件，所以首先要通过 "),s("code",[t._v("ulimit")]),t._v(" 配置文件描述符的数目；")]),t._v(" "),s("li",[t._v("另一个是"),s("strong",[t._v("内存限制")]),t._v("，每个 TCP 连接都要占用一定内存，操作系统是有限的。")])])])]),t._v(" "),s("h4",{attrs:{id:"udp和tcp有什么区别呢-分别的应用场景是"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp和tcp有什么区别呢-分别的应用场景是"}},[t._v("#")]),t._v(" UDP和TCP有什么区别呢？分别的应用场景是？")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("区别")]),t._v(" "),s("ul",[s("li",[t._v("连接\n"),s("ul",[s("li",[t._v("TCP 是面向连接的传输层协议，传输数据前先要建立连接。")]),t._v(" "),s("li",[t._v("UDP 是不需要连接，即刻传输数据。")])])]),t._v(" "),s("li",[t._v("服务对象\n"),s("ul",[s("li",[t._v("TCP 是一对一的两点服务，即一条连接只有两个端点。")]),t._v(" "),s("li",[t._v("UDP 支持一对一、一对多、多对多的交互通信。")])])]),t._v(" "),s("li",[t._v("可靠性\n"),s("ul",[s("li",[t._v("TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按需到达。")]),t._v(" "),s("li",[t._v("UDP 是尽最大努力交付，不保证可靠交付数据。")])])]),t._v(" "),s("li",[t._v("拥塞控制、流量控制\n"),s("ul",[s("li",[t._v("TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。")]),t._v(" "),s("li",[t._v("UDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。")])])]),t._v(" "),s("li",[t._v("首部开销\n"),s("ul",[s("li",[t._v("TCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 "),s("code",[t._v("20")]),t._v(" 个字节，如果使用了「选项」字段则会变长的。")]),t._v(" "),s("li",[t._v("UDP 首部只有 8 个字节，并且是固定不变的，开销较小。")])])])])]),t._v(" "),s("li",[s("strong",[t._v("应用场景")]),t._v(" "),s("ul",[s("li",[t._v("TCP，面向连接，保证数据可靠性交付，如FTP、HTTP/HTTPS。")]),t._v(" "),s("li",[t._v("UDP，面向无连接，随时发送数据，简单高效，用于包总量较少的通信，如DNS 、SNMP、音视频多媒体通信、广播通信。")])])])]),t._v(" "),s("h4",{attrs:{id:"为什么udp头部没有「首部长度」字段-而-tcp-头部有「首部长度」字段呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么udp头部没有「首部长度」字段-而-tcp-头部有「首部长度」字段呢"}},[t._v("#")]),t._v(" 为什么UDP头部没有「首部长度」字段，而 TCP 头部有「首部长度」字段呢？")]),t._v(" "),s("ul",[s("li",[t._v("原因是TCP有"),s("strong",[t._v("可变长")]),t._v("的「选项」字段，而 UDP 头部长度则是"),s("strong",[t._v("不会变化")]),t._v("的，无需多一个字段去记录 UDP 的首部长度。")])]),t._v(" "),s("h4",{attrs:{id:"为什么-udp-头部有「包长度」字段-而-tcp-头部则没有「包长度」字段呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-udp-头部有「包长度」字段-而-tcp-头部则没有「包长度」字段呢"}},[t._v("#")]),t._v(" 为什么 UDP 头部有「包长度」字段，而 TCP 头部则没有「包长度」字段呢？")]),t._v(" "),s("ul",[s("li",[t._v("TCP的负载数据长度：\n"),s("ul",[s("li",[t._v("TCP数据的长度 = IP总长度 - IP首部长度 -TCP首部长度")])])]),t._v(" "),s("li",[t._v("因为为了网络设备硬件设计和处理方便，首部长度需要是 "),s("code",[t._v("4")]),t._v("字节的整数倍。可能是为了补全UDP首部长度是 "),s("code",[t._v("4")]),t._v(" 字节的整数倍，才补充了「包长度」字段。")])]),t._v(" "),s("h3",{attrs:{id:"tcp连接建立"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp连接建立"}},[t._v("#")]),t._v(" TCP连接建立")]),t._v(" "),s("h4",{attrs:{id:"tcp三次握手过程和状态变迁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手过程和状态变迁"}},[t._v("#")]),t._v(" TCP三次握手过程和状态变迁")]),t._v(" "),s("ul",[s("li",[t._v("一开始，客户端和服务端都处于 "),s("code",[t._v("CLOSED")]),t._v(" 状态。先是服务端主动监听某个端口，处于 "),s("code",[t._v("LISTEN")]),t._v(" 状态。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(760),alt:"image-20220121163249494"}})]),t._v(" "),s("li",[t._v("客户端会随机初始化序号（"),s("code",[t._v("client_isn")]),t._v("），将此序号置于 TCP 首部的「序号」字段中，同时把 "),s("code",[t._v("SYN")]),t._v(" 标志位置为 "),s("code",[t._v("1")]),t._v(" ，表示 "),s("code",[t._v("SYN")]),t._v(" 报文。接着把第一个 SYN 报文发送给服务端，表示向服务端发起连接，该报文不包含应用层数据，之后客户端处于 "),s("code",[t._v("SYN-SENT")]),t._v(" 状态。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(761),alt:"image-20220121164159485"}})]),t._v(" "),s("li",[t._v("服务端收到客户端的 "),s("code",[t._v("SYN")]),t._v(" 报文后，首先服务端也随机初始化自己的序号（"),s("code",[t._v("server_isn")]),t._v("），将此序号填入 TCP 首部的「序号」字段中，其次把 TCP 首部的「确认应答号」字段填入 "),s("code",[t._v("client_isn + 1")]),t._v(", 接着把 "),s("code",[t._v("SYN")]),t._v(" 和 "),s("code",[t._v("ACK")]),t._v(" 标志位置为 "),s("code",[t._v("1")]),t._v("。最后把该报文发给客户端，该报文也不包含应用层数据，之后服务端处于 "),s("code",[t._v("SYN-RCVD")]),t._v(" 状态。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(762),alt:"image-20220121164240990"}})]),t._v(" "),s("li",[t._v("客户端收到服务端报文后，还要向服务端回应最后一个应答报文，首先该应答报文 TCP 首部 "),s("code",[t._v("ACK")]),t._v(" 标志位置为 "),s("code",[t._v("1")]),t._v(" ，其次「确认应答号」字段填入 "),s("code",[t._v("server_isn + 1")]),t._v(" ，最后把报文发送给服务端，这次报文可以携带客户到服务器的数据，之后客户端处于 "),s("code",[t._v("ESTABLISHED")]),t._v(" 状态。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(763),alt:"image-20220121164259606"}})]),t._v(" "),s("li",[t._v("服务器收到客户端的应答报文后，也进入 "),s("code",[t._v("ESTABLISHED")]),t._v(" 状态。")]),t._v(" "),s("li",[t._v("从上面的过程可以发现"),s("strong",[t._v("第三次握手是可以携带数据的，前两次握手是不可以携带数据的")]),t._v("，这也是面试常问的题。")])]),t._v(" "),s("h4",{attrs:{id:"如何在-linux-系统中查看-tcp-状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何在-linux-系统中查看-tcp-状态"}},[t._v("#")]),t._v(" 如何在 Linux 系统中查看 TCP 状态？")]),t._v(" "),s("ul",[s("li",[t._v("TCP 的连接状态查看，在 Linux 可以通过 "),s("code",[t._v("netstat -napt")]),t._v(" 命令查看。")])]),t._v(" "),s("h4",{attrs:{id:"为什么是三次握手-不是两次、四次"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么是三次握手-不是两次、四次"}},[t._v("#")]),t._v(" 为什么是三次握手？不是两次、四次？")]),t._v(" "),s("ul",[s("li",[t._v("因为三次握手才能保证双方具有接收和发送的能力。此回答正确但比较片面。")]),t._v(" "),s("li",[t._v("为什么三次握手才可以初始化Socket、序列号和窗口大小并建立 TCP 连接。\n"),s("ul",[s("li",[s("strong",[t._v("三次握手才可以阻止历史重复连接的初始化（主要原因）")]),t._v("。\n"),s("ul",[s("li",[t._v("客户端连续发送多次 SYN 建立连接的报文，在网络拥堵等情况下，如果是两次握手连接，客户端不能判断当前连接是否是历史连接，三次握手则可以在客户端（发送方）准备发送第三次报文时，客户端因有足够的上下文来判断当前连接是否是历史连接：")]),t._v(" "),s("li",[s("img",{attrs:{src:v(764),alt:"image-20220201212310911"}})])])]),t._v(" "),s("li",[s("strong",[t._v("三次握手才可以同步双方的初始序列号")]),t._v("。\n"),s("ul",[s("li",[t._v("两次握手只保证了一方的初始序列号能被对方成功接收，无法保证双方的初始序列号都能被确认接收。")])])]),t._v(" "),s("li",[s("strong",[t._v("三次握手才可以避免资源浪费")]),t._v("。\n"),s("ul",[s("li",[t._v("如果客户端的 "),s("code",[t._v("SYN")]),t._v(" 阻塞了，重复发送多次 "),s("code",[t._v("SYN")]),t._v(" 报文，那么服务器在收到请求后就会建立多个冗余的无效链接，造成不必要的资源浪费。")])])])])]),t._v(" "),s("li",[s("font",{attrs:{color:"red"}},[t._v("总结")]),t._v("：TCP 建立连接时，通过三次握手"),s("strong",[t._v("能防止历史连接的建立，能减少双方不必要的资源开销，能帮助双方同步初始化序列号")]),t._v("。序列号能够保证数据包不重复、不丢弃和按序传输。\n"),s("ul",[s("li",[t._v("「两次握手」：无法防止历史连接的建立，会造成双方资源的浪费，也无法可靠的同步双方序列号；")]),t._v(" "),s("li",[t._v("「四次握手」：三次握手就已经理论上最少可靠连接建立，所以不需要使用更多的通信次数；")])])],1)]),t._v(" "),s("h4",{attrs:{id:"为什么客户端和服务端的初始序列号-isn-是不相同的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么客户端和服务端的初始序列号-isn-是不相同的"}},[t._v("#")]),t._v(" 为什么客户端和服务端的初始序列号 ISN 是不相同的？")]),t._v(" "),s("ul",[s("li",[t._v("因为网络中的报文"),s("strong",[t._v("会延迟、会复制重发、也有可能丢失")]),t._v("，这样会造成的不同连接之间产生互相影响，所以为了避免互相影响，客户端和服务端的初始序列号是随机且不同的。")])]),t._v(" "),s("h4",{attrs:{id:"初始序列号-isn-是如何随机产生的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始序列号-isn-是如何随机产生的"}},[t._v("#")]),t._v(" 初始序列号 ISN 是如何随机产生的？")]),t._v(" "),s("ul",[s("li",[t._v("ISN = M + F (localhost, localport, remotehost, remoteport)")]),t._v(" "),s("li",[t._v("M是一个计时器，这个计时器每隔 4 毫秒加 1。")]),t._v(" "),s("li",[t._v("F是一个 Hash 算法，根据源 IP、目的 IP、源端口、目的端口生成一个随机数值。要保证 Hash 算法不能被外部轻易推算得出，用 MD5 算法是一个比较好的选择。")])]),t._v(" "),s("h4",{attrs:{id:"既然-ip-层会分片-为什么-tcp-层还需要-mss-呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#既然-ip-层会分片-为什么-tcp-层还需要-mss-呢"}},[t._v("#")]),t._v(" 既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？")]),t._v(" "),s("ul",[s("li",[t._v("MTU、MSS\n"),s("ul",[s("li",[t._v("MTU，一个网络包的最大长度，以太网中一般为 "),s("code",[t._v("1500")]),t._v(" 字节；")]),t._v(" "),s("li",[t._v("MSS，除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度；")]),t._v(" "),s("li",[s("img",{attrs:{src:v(765),alt:"image-20220121172609816"}})])])]),t._v(" "),s("li",[s("strong",[t._v("如果TCP 的整个报文（头部 + 数据）交给 IP 层进行分片，会有什么异常呢？")]),t._v(" "),s("ul",[s("li",[t._v("当 IP 层有一个超过 "),s("code",[t._v("MTU")]),t._v(" 大小的数据（TCP 头部 + TCP 数据）要发送，那么 IP 层就要进行分片，把数据分片成若干片，保证每一个分片都小于 MTU。把一份 IP 数据报进行分片以后，由目标主机的 IP 层来进行重新组装后，在交给上一层 TCP 传输层。")]),t._v(" "),s("li",[t._v("这看起来井然有序，但这存在隐患的，"),s("strong",[t._v("那么当如果一个 IP 分片丢失，整个 IP 报文的所有分片都得重传")]),t._v("。")]),t._v(" "),s("li",[t._v("因为 I"),s("strong",[t._v("P 层本身没有超时重传机制")]),t._v("，它由传输层的 TCP 来负责超时和重传。")]),t._v(" "),s("li",[t._v("当接收方发现 TCP 报文（头部 + 数据）的某一片丢失后，则不会响应 ACK 给对方，那么发送方的 TCP 在超时后，就会重发「整个 TCP 报文（头部 + 数据）」。")]),t._v(" "),s("li",[t._v("因此，可以得知由 IP 层进行分片传输，是非常没有效率的。")]),t._v(" "),s("li",[t._v("所以，为了达到最佳的传输效能 TCP 协议在"),s("strong",[t._v("建立连接的时候通常要协商双方的 MSS 值")]),t._v("，当 TCP 层发现数据超过 MSS 时，则就先会进行分片，当然由它形成的 IP 包的长度也就不会大于 MTU ，自然也就不用 IP 分片了。")]),t._v(" "),s("li",[t._v("经过 TCP 层分片后，如果一个 TCP 分片丢失后，"),s("strong",[t._v("进行重发时也是以 MSS 为单位")]),t._v("，而不用重传所有的分片，大大增加了重传的效率。")])])])]),t._v(" "),s("h4",{attrs:{id:"linux-内核的-syn-未完成连接建立-队列与-accpet-已完成连接建立-队列是如何工作的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux-内核的-syn-未完成连接建立-队列与-accpet-已完成连接建立-队列是如何工作的"}},[t._v("#")]),t._v(" Linux 内核的 "),s("code",[t._v("SYN")]),t._v(" （未完成连接建立）队列与 "),s("code",[t._v("Accpet")]),t._v(" （已完成连接建立）队列是如何工作的？")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("正常流程")]),t._v("：\n"),s("ul",[s("li",[t._v("当服务端接收到客户端的 SYN 报文时，会将其加入到内核的「 SYN 队列」；")]),t._v(" "),s("li",[t._v("接着发送 SYN + ACK 给客户端，等待客户端回应 ACK 报文；")]),t._v(" "),s("li",[t._v("服务端接收到 ACK 报文后，从「 SYN 队列」移除放入到「 Accept 队列」；")]),t._v(" "),s("li",[t._v("应用通过调用 "),s("code",[t._v("accpet()")]),t._v(" socket 接口，从「 Accept 队列」取出的连接。")])])]),t._v(" "),s("li",[s("strong",[t._v("应用程序过慢")]),t._v("：\n"),s("ul",[s("li",[t._v("如果应用程序过慢时，就会导致「 Accept 队列」被占满。")])])]),t._v(" "),s("li",[s("strong",[t._v("受到 SYN 攻击")]),t._v("：\n"),s("ul",[s("li",[t._v("如果不断受到 SYN 攻击，就会导致「 SYN 队列」被占满。")])])])]),t._v(" "),s("h4",{attrs:{id:"什么是-syn-攻击-如何避免-syn-攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-syn-攻击-如何避免-syn-攻击"}},[t._v("#")]),t._v(" 什么是 "),s("a",{attrs:{id:"SYN 攻击"}},[t._v("SYN 攻击")]),t._v("？如何避免 SYN 攻击？")]),t._v(" "),s("ul",[s("li",[t._v("TCP 连接建立是需要三次握手，假设攻击者短时间伪造不同 IP 地址的 "),s("code",[t._v("SYN")]),t._v(" 报文，服务端每接收到一个 "),s("code",[t._v("SYN")]),t._v(" 报文，就进入"),s("code",[t._v("SYN_RCVD")]),t._v(" 状态，但服务端发送出去的 "),s("code",[t._v("ACK + SYN")]),t._v(" 报文，无法得到未知 IP 主机的 "),s("code",[t._v("ACK")]),t._v(" 应答，久而久之就会"),s("strong",[t._v("占满服务端的 SYN 接收队列（未连接队列）")]),t._v("，使得服务器不能为正常用户服务。")]),t._v(" "),s("li",[t._v("避免 SYN 攻击方式\n"),s("ul",[s("li",[t._v("通过修改 Linux 内核参数，控制队列大小和当队列满时应做什么处理。")])]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("当网卡接收数据包的速度大于内核处理的速度时，会有一个队列保存这些数据包。控制该队列的最大值如下参数：net.core.netdev_max_backlog；")]),t._v(" "),s("li",[t._v("SYN_RCVD 状态连接的最大个数：net.ipv4.tcp_max_syn_backlog；")]),t._v(" "),s("li",[t._v("超出处理能时，对新的 SYN 直接回 RST，丢弃连接：net.ipv4.tcp_abort_on_overflow；")])])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("tcp_syncookies")]),t._v(" 的方式可以应对 SYN 攻击的方法：net.ipv4.tcp_syncookies = 1；\n"),s("ul",[s("li",[t._v("当 「 SYN 队列」满之后，后续服务器收到 SYN 包，不进入「 SYN 队列」；")]),t._v(" "),s("li",[t._v("计算出一个 "),s("code",[t._v("cookie")]),t._v(" 值，再以 SYN + ACK 中的「序列号」返回客户端，")]),t._v(" "),s("li",[t._v("服务端接收到客户端的应答报文时，服务器会检查这个 ACK 包的合法性。如果合法，直接放入到「 Accept 队列」。")]),t._v(" "),s("li",[t._v("最后应用通过调用 "),s("code",[t._v("accpet()")]),t._v(" socket 接口，从「 Accept 队列」取出的连接。")])])])])])]),t._v(" "),s("h3",{attrs:{id:"tcp连接断开"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp连接断开"}},[t._v("#")]),t._v(" TCP连接断开")]),t._v(" "),s("h4",{attrs:{id:"tcp四次挥手过程和状态变迁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp四次挥手过程和状态变迁"}},[t._v("#")]),t._v(" TCP四次挥手过程和状态变迁")]),t._v(" "),s("ul",[s("li",[t._v("客户端打算关闭连接，此时会发送一个 TCP 首部 "),s("code",[t._v("FIN")]),t._v(" 标志位被置为 "),s("code",[t._v("1")]),t._v(" 的报文，也即 "),s("code",[t._v("FIN")]),t._v(" 报文，之后客户端进入 "),s("code",[t._v("FIN_WAIT_1")]),t._v(" 状态。")]),t._v(" "),s("li",[t._v("服务端收到该报文后，就向客户端发送 "),s("code",[t._v("ACK")]),t._v(" 应答报文，接着服务端进入 "),s("code",[t._v("CLOSED_WAIT")]),t._v(" 状态。")]),t._v(" "),s("li",[t._v("客户端收到服务端的 "),s("code",[t._v("ACK")]),t._v(" 应答报文后，之后进入 "),s("code",[t._v("FIN_WAIT_2")]),t._v(" 状态。")]),t._v(" "),s("li",[t._v("等待服务端处理完数据后，也向客户端发送 "),s("code",[t._v("FIN")]),t._v(" 报文，之后服务端进入 "),s("code",[t._v("LAST_ACK")]),t._v(" 状态。")]),t._v(" "),s("li",[t._v("客户端收到服务端的 "),s("code",[t._v("FIN")]),t._v(" 报文后，回一个 "),s("code",[t._v("ACK")]),t._v(" 应答报文，之后进入 "),s("code",[t._v("TIME_WAIT")]),t._v(" 状态。")]),t._v(" "),s("li",[t._v("服务器收到了 "),s("code",[t._v("ACK")]),t._v(" 应答报文后，就进入了 "),s("code",[t._v("CLOSE")]),t._v(" 状态，至此服务端已经完成连接的关闭。")]),t._v(" "),s("li",[t._v("客户端在经过 "),s("code",[t._v("2MSL")]),t._v(" 一段时间后，自动进入 "),s("code",[t._v("CLOSE")]),t._v(" 状态，至此客户端也完成连接的关闭。")]),t._v(" "),s("li",[t._v("注意：："),s("strong",[t._v("主动关闭连接的，才有 TIME_WAIT 状态")]),t._v("。")])]),t._v(" "),s("p",[s("img",{attrs:{src:v(766),alt:"image-20220124115057071"}})]),t._v(" "),s("h4",{attrs:{id:"为什么挥手需要四次"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么挥手需要四次"}},[t._v("#")]),t._v(" 为什么挥手需要四次？")]),t._v(" "),s("ul",[s("li",[t._v("回顾下四次挥手双方发 "),s("code",[t._v("FIN")]),t._v(" 包的过程，就能理解为什么需要四次了。\n"),s("ul",[s("li",[t._v("关闭连接时，客户端向服务端发送 "),s("code",[t._v("FIN")]),t._v(" 时，仅仅表示客户端不再发送数据了但是还能接收数据。")]),t._v(" "),s("li",[t._v("服务器收到客户端的 "),s("code",[t._v("FIN")]),t._v(" 报文时，先回一个 "),s("code",[t._v("ACK")]),t._v(" 应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 "),s("code",[t._v("FIN")]),t._v(" 报文给客户端来表示同意现在关闭连接。")])])]),t._v(" "),s("li",[t._v("从上面过程可知，服务端通常需要等待完成数据的发送和处理，所以服务端的 "),s("code",[t._v("ACK")]),t._v(" 和 "),s("code",[t._v("FIN")]),t._v(" 一般都会分开发送，从而比三次握手导致多了一次。")])]),t._v(" "),s("h4",{attrs:{id:"为什么-time-wait-等待的时间是-2msl"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-time-wait-等待的时间是-2msl"}},[t._v("#")]),t._v(" 为什么 TIME_WAIT 等待的时间是 2MSL？")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("MSL")]),t._v(" 是 Maximum Segment Lifetime，"),s("strong",[t._v("报文最大生存时间")]),t._v("，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。因为 TCP 报文基于是 IP 协议的，而 IP 头中有一个 "),s("code",[t._v("TTL")]),t._v(" 字段，是 IP 数据报可以经过的最大路由数，每经过一个处理他的路由器此值就减 1，当此值为 0 则数据报将被丢弃，同时发送 ICMP 报文通知源主机。")]),t._v(" "),s("li",[t._v("MSL 与 TTL 的区别：MSL 的单位是时间，而 TTL 是经过路由跳数。所以 "),s("strong",[t._v("MSL 应该要大于等于 TTL 消耗为 0 的时间")]),t._v("，以确保报文已被自然消亡。")]),t._v(" "),s("li",[t._v("TIME_WAIT 等待 2 倍的 MSL，比较合理的解释是：网络中可能存在来自发送方的数据包，当这些发送方的数据包被接收方处理后又会向对方发送响应，所以"),s("strong",[t._v("一来一回需要等待 2 倍的时间")]),t._v("。")]),t._v(" "),s("li",[t._v("比如，如果被动关闭方没有收到断开连接的最后的 ACK 报文，就会触发超时重发FIN报文，另一方接收到 FIN 后，会重发 ACK 给被动关闭方， 一来一去正好 2 个 MSL。")]),t._v(" "),s("li",[s("code",[t._v("2MSL")]),t._v(" 的时间是从"),s("strong",[t._v("客户端接收到 FIN 后发送 ACK 开始计时的")]),t._v("。如果在 TIME-WAIT 时间内，因为客户端的 ACK 没有传输到服务端，客户端又接收到了服务端重发的 FIN 报文，那么 "),s("strong",[t._v("2MSL 时间将重新计时")]),t._v("。")]),t._v(" "),s("li",[t._v("在 Linux 系统里 "),s("code",[t._v("2MSL")]),t._v(" 默认是 "),s("code",[t._v("60")]),t._v(" 秒，那么一个 "),s("code",[t._v("MSL")]),t._v(" 也就是 "),s("code",[t._v("30")]),t._v(" 秒。"),s("strong",[t._v("Linux 系统停留在 TIME_WAIT 的时间为固定的 60 秒")]),t._v("。")])]),t._v(" "),s("h4",{attrs:{id:"为什么需要-time-wait-状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要-time-wait-状态"}},[t._v("#")]),t._v(" 为什么需要 TIME_WAIT 状态？")]),t._v(" "),s("ul",[s("li",[t._v("主动发起关闭连接的一方，才会有 "),s("code",[t._v("TIME-WAIT")]),t._v(" 状态。")]),t._v(" "),s("li",[t._v("需要 TIME-WAIT 状态，主要是两个原因：\n"),s("ul",[s("li",[t._v("防止具有相同「四元组」的「旧」数据包被收到；")]),t._v(" "),s("li",[t._v("保证「被动关闭连接」的一方能被正确的关闭，即保证最后的 ACK 能让被动关闭方接收，从而帮助其正常关闭；")])]),t._v(" "),s("blockquote",[s("ul",[s("li",[s("p",[s("strong",[t._v("原因一：防止旧连接的数据包")])])]),t._v(" "),s("li",[s("p",[t._v("假设 TIME-WAIT 没有等待时间或时间过短，被延迟的数据包抵达后会发生什么呢？")])]),t._v(" "),s("li",[s("p",[s("img",{attrs:{src:v(767),alt:"image-20220124145818810"}})])]),t._v(" "),s("li",[s("p",[t._v("如上图黄色框框服务端在关闭连接之前发送的 "),s("code",[t._v("SEQ = 301")]),t._v(" 报文，被网络延迟了。")])]),t._v(" "),s("li",[s("p",[t._v("这时有相同端口的 TCP 连接被复用后，被延迟的 "),s("code",[t._v("SEQ = 301")]),t._v(" 抵达了客户端，那么客户端是有可能正常接收这个过期的报文，这就会产生数据错乱等严重的问题。")])]),t._v(" "),s("li",[s("p",[t._v("所以，TCP 就设计出了这么一个机制，经过 "),s("code",[t._v("2MSL")]),t._v(" 这个时间，"),s("strong",[t._v("足以让两个方向上的数据包都被丢弃，使得原来连接的数据包在网络中都自然消失，再出现的数据包一定都是新建立连接所产生的")]),t._v("。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("原因二：保证连接正确关闭")])])]),t._v(" "),s("li",[s("p",[t._v("TIME-WAIT 作用是"),s("strong",[t._v("等待足够的时间以确保最后的 ACK 能让被动关闭方接收，从而帮助其正常关闭")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("假设 TIME-WAIT 没有等待时间或时间过短，断开连接会造成什么问题呢？")])]),t._v(" "),s("li",[s("p",[s("img",{attrs:{src:v(768),alt:"image-20220124150127910"}})])]),t._v(" "),s("li",[s("p",[t._v("如上图红色框框客户端四次挥手的最后一个 "),s("code",[t._v("ACK")]),t._v(" 报文如果在网络中被丢失了，此时如果客户端 "),s("code",[t._v("TIME-WAIT")]),t._v(" 过短或没有，则就直接进入了 "),s("code",[t._v("CLOSE")]),t._v(" 状态了，那么服务端则会一直处在 "),s("code",[t._v("LASE-ACK")]),t._v(" 状态。")])]),t._v(" "),s("li",[s("p",[t._v("当客户端发起建立连接的 "),s("code",[t._v("SYN")]),t._v(" 请求报文后，服务端会发送 "),s("code",[t._v("RST")]),t._v(" 报文给客户端，连接建立的过程就会被终止。")])]),t._v(" "),s("li",[s("p",[t._v("如果 TIME-WAIT 等待足够长的情况就会遇到两种情况：")]),t._v(" "),s("ul",[s("li",[t._v("服务端正常收到四次挥手的最后一个 "),s("code",[t._v("ACK")]),t._v(" 报文，则服务端正常关闭连接。")]),t._v(" "),s("li",[t._v("服务端没有收到四次挥手的最后一个 "),s("code",[t._v("ACK")]),t._v(" 报文时，则会重发 "),s("code",[t._v("FIN")]),t._v(" 关闭连接报文并等待新的 "),s("code",[t._v("ACK")]),t._v(" 报文。")])])]),t._v(" "),s("li",[s("p",[t._v("所以客户端在 "),s("code",[t._v("TIME-WAIT")]),t._v(" 状态等待 "),s("code",[t._v("2MSL")]),t._v(" 时间后，就可以"),s("strong",[t._v("保证双方的连接都可以正常的关闭。")])])])])])])]),t._v(" "),s("h4",{attrs:{id:"time-wait-过多有什么危害"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#time-wait-过多有什么危害"}},[t._v("#")]),t._v(" TIME_WAIT 过多有什么危害？")]),t._v(" "),s("ul",[s("li",[t._v("如果服务器有处于 TIME-WAIT 状态的 TCP，则说明是由服务器方主动发起的断开请求。")]),t._v(" "),s("li",[t._v("过多的 TIME-WAIT 状态主要的危害有两种：\n"),s("ul",[s("li",[t._v("第一是内存资源占用；")]),t._v(" "),s("li",[t._v("第二是对端口资源的占用，一个 TCP 连接至少消耗一个本地端口；\n"),s("ul",[s("li",[t._v("如果服务端 TIME_WAIT 状态过多，占满了所有端口资源，则会导致无法创建新连接。")])])])])])]),t._v(" "),s("h4",{attrs:{id:"如何优化-time-wait"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何优化-time-wait"}},[t._v("#")]),t._v(" 如何优化 TIME_WAIT？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("打开 net.ipv4.tcp_tw_reuse 和 net.ipv4.tcp_timestamps 选项；")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("net.ipv4.tcp_tw_reuse")]),t._v("要慎用，因为使用了它就必然要打开时间戳的支持 "),s("code",[t._v("net.ipv4.tcp_timestamps")]),t._v("，"),s("strong",[t._v("当客户端与服务端主机时间不同步时，客户端的发送的消息会被直接拒绝掉")]),t._v("。")])])]),t._v(" "),s("li",[s("p",[t._v("net.ipv4.tcp_max_tw_buckets")]),t._v(" "),s("ul",[s("li",[t._v("这个值默认为 18000，当系统中处于 TIME_WAIT 的连接"),s("strong",[t._v("一旦超过这个值时，系统就会将所有的 TIME_WAIT 连接状态重置")]),t._v("。")]),t._v(" "),s("li",[t._v("这个方法过于暴力，而且治标不治本，带来的问题远比解决的问题多，不推荐使用。")])])]),t._v(" "),s("li",[s("p",[t._v("程序中使用 SO_LINGER ，应用强制使用 RST 关闭。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("通过设置 socket 选项，来设置调用 close 关闭连接行为。")])]),t._v(" "),s("li",[s("p",[t._v("为跨越"),s("code",[t._v("TIME_WAIT")]),t._v("状态提供了一个可能，不过是一个非常危险的行为，不值得提倡。")])]),t._v(" "),s("li",[s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("linger")]),t._v(" so_linger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nso_linger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("l_onoff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nso_linger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("l_linger "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setsockopt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SOL_SOCKET"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SO_LINGER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("so_linger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("so_linger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*如果l_onoff为非 0， 且l_linger值为 0，那么调用close后，会立该发送一个RST标志给对端，\n该 TCP 连接将跳过四次挥手，也就跳过了TIME_WAIT状态，直接关闭。*/")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])])])])])]),t._v(" "),s("h4",{attrs:{id:"如果已经建立了连接-但是客户端突然出现故障了怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果已经建立了连接-但是客户端突然出现故障了怎么办"}},[t._v("#")]),t._v(" 如果已经建立了连接，但是客户端突然出现故障了怎么办？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("TCP 有一个机制是"),s("strong",[t._v("保活机制")]),t._v("。即定义一个时间段，在这个时间段内，如果没有任何连接相关的活动，TCP 保活机制会开始作用，每隔一个时间间隔，发送一个探测报文，该探测报文包含的数据非常少，如果连续几个探测报文都没有得到响应，则认为当前的 TCP 连接已经死亡，系统内核将错误信息通知给上层应用程序。")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在 Linux 内核可以有对应的参数可以设置保活时间、保活探测的次数、保活探测的时间间隔，以下都为默认值：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//也就是说在 Linux 系统中，最少需要经过 2 小时 11 分 15 秒（7200+（75*9））才发现一个「死亡」连接。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示保活时间是 7200 秒（2小时），也就 2 小时内如果没有任何连接相关的活动，则会启动保活机制")]),t._v("\nnet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ipv4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tcp_keepalive_time"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7200")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示每次检测间隔 75 秒  ")]),t._v("\nnet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ipv4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tcp_keepalive_intvl"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("75")]),t._v("  \n    \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示检测 9 次无响应，认为对方是不可达的，从而中断本次的连接    ")]),t._v("\nnet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ipv4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tcp_keepalive_probes"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])])])]),t._v(" "),s("h4",{attrs:{id:"如果开启了-tcp-保活-需要考虑以下几种情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果开启了-tcp-保活-需要考虑以下几种情况"}},[t._v("#")]),t._v(" 如果开启了 TCP 保活，需要考虑以下几种情况")]),t._v(" "),s("ul",[s("li",[t._v("对端程序是正常工作的。当 TCP 保活的探测报文发送给对端, 对端会正常响应，这样 "),s("strong",[t._v("TCP 保活时间会被重置")]),t._v("，等待下一个 TCP 保活时间的到来。")]),t._v(" "),s("li",[t._v("对端程序崩溃并重启。当 TCP 保活的探测报文发送给对端后，对端是可以响应的，但由于没有该连接的有效信息，"),s("strong",[t._v("会产生一个 RST 报文")]),t._v("，这样很快就会发现 TCP 连接已经被重置。")]),t._v(" "),s("li",[t._v("对端程序崩溃，或对端由于其他原因导致报文不可达。当 TCP 保活的探测报文发送给对端后，石沉大海，没有响应，连续几次，达到保活探测次数后，"),s("strong",[t._v("TCP 会报告该 TCP 连接已经死亡")]),t._v("。")])]),t._v(" "),s("h3",{attrs:{id:"socket编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#socket编程"}},[t._v("#")]),t._v(" SOCKET编程")]),t._v(" "),s("h4",{attrs:{id:"tcp-应该如何-socket-编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-应该如何-socket-编程"}},[t._v("#")]),t._v(" TCP 应该如何 Socket 编程？")]),t._v(" "),s("ul",[s("li",[t._v("需要注意的是，服务端调用 "),s("code",[t._v("accept")]),t._v(" 时，连接成功了会返回一个已完成连接的 socket，后续用来传输数据。")]),t._v(" "),s("li",[t._v("所以，监听的 socket 和真正用来传送数据的 socket，是「两个」 socket，一个叫作"),s("strong",[t._v("监听 socket")]),t._v("，一个叫作"),s("strong",[t._v("已完成连接 socket")]),t._v("。")])]),t._v(" "),s("p",[s("img",{attrs:{src:v(769),alt:"image-20220124155002288"}})]),t._v(" "),s("h4",{attrs:{id:"listen-时候参数-backlog-的意义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#listen-时候参数-backlog-的意义"}},[t._v("#")]),t._v(" listen 时候参数 backlog 的意义？")]),t._v(" "),s("ul",[s("li",[t._v("Linux内核中会维护两个队列：\n"),s("ul",[s("li",[t._v("未完成连接队列（SYN 队列）：接收到一个 SYN 建立连接请求，处于 SYN_RCVD 状态；")]),t._v(" "),s("li",[t._v("已完成连接队列（Accpet 队列）：已完成 TCP 三次握手过程，处于 ESTABLISHED 状态；")]),t._v(" "),s("li",[t._v("在 Linux 内核 2.2 之后，backlog 变成 accept 队列，也就是已完成连接建立的队列长度，"),s("strong",[t._v("所以现在通常认为 backlog 是 accept 队列")]),t._v("。")])])])]),t._v(" "),s("h4",{attrs:{id:"accept-发送在三次握手的哪一步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#accept-发送在三次握手的哪一步"}},[t._v("#")]),t._v(" accept 发送在三次握手的哪一步？")]),t._v(" "),s("ul",[s("li",[t._v("客户端 connect 成功返回是在第二次握手，服务端 accept 成功返回是在三次握手成功之后。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(770),alt:"image-20220124160652469"}})])]),t._v(" "),s("h4",{attrs:{id:"客户端调用-close-了-连接是断开的流程是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端调用-close-了-连接是断开的流程是什么"}},[t._v("#")]),t._v(" 客户端调用 close 了，连接是断开的流程是什么？")]),t._v(" "),s("ul",[s("li",[t._v("客户端调用 "),s("code",[t._v("close")]),t._v("，表明客户端没有数据需要发送了，则此时会向服务端发送 FIN 报文，进入 FIN_WAIT_1 状态；")]),t._v(" "),s("li",[t._v("服务端接收到了 FIN 报文，TCP 协议栈会为 FIN 包插入一个文件结束符 "),s("code",[t._v("EOF")]),t._v(" 到接收缓冲区中，应用程序可以通过 "),s("code",[t._v("read")]),t._v(" 调用来感知这个 FIN 包。这个 "),s("code",[t._v("EOF")]),t._v(" 会被"),s("strong",[t._v("放在已排队等候的其他已接收的数据之后")]),t._v("，这就意味着服务端需要处理这种异常情况，因为 EOF 表示在该连接上再无额外数据到达。此时，服务端进入 CLOSE_WAIT 状态；")]),t._v(" "),s("li",[t._v("接着，当处理完数据后，自然就会读到 "),s("code",[t._v("EOF")]),t._v("，于是也调用 "),s("code",[t._v("close")]),t._v(" 关闭它的套接字，这会使得会发出一个 FIN 包，之后处于 LAST_ACK 状态；")]),t._v(" "),s("li",[t._v("客户端接收到服务端的 FIN 包，并发送 ACK 确认包给服务端，此时客户端将进入 TIME_WAIT 状态；")]),t._v(" "),s("li",[t._v("服务端收到 ACK 确认包后，就进入了最后的 CLOSE 状态；")]),t._v(" "),s("li",[t._v("客户端进过 "),s("code",[t._v("2MSL")]),t._v(" 时间之后，也进入 CLOSED 状态；")]),t._v(" "),s("li",[s("img",{attrs:{src:v(771),alt:"image-20220124160837677"}})])]),t._v(" "),s("h3",{attrs:{id:"tcp状态转移"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp状态转移"}},[t._v("#")]),t._v(" TCP状态转移")]),t._v(" "),s("ul",[s("li",[s("img",{attrs:{src:v(772),alt:"image-20220121154321476"}})])]),t._v(" "),s("h3",{attrs:{id:"重传机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重传机制"}},[t._v("#")]),t._v(" 重传机制")]),t._v(" "),s("h4",{attrs:{id:"超时重传"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#超时重传"}},[t._v("#")]),t._v(" "),s("strong",[t._v("超时重传")])]),t._v(" "),s("h4",{attrs:{id:"什么情况下发生超时重传"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下发生超时重传"}},[t._v("#")]),t._v(" 什么情况下发生超时重传？")]),t._v(" "),s("ul",[s("li",[t._v("数据包丢失；")]),t._v(" "),s("li",[t._v("确认应答丢失；")])]),t._v(" "),s("h4",{attrs:{id:"超时时间应该设置为多少呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#超时时间应该设置为多少呢"}},[t._v("#")]),t._v(" 超时时间应该设置为多少呢")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("RTT")]),t._v(" 就是"),s("strong",[t._v("数据从网络一端传送到另一端所需的时间")]),t._v("，也就是包的往返时间。")]),t._v(" "),s("li",[t._v("超时重传时间是以 "),s("code",[t._v("RTO")]),t._v(" （Retransmission Timeout 超时重传时间）表示。\n"),s("ul",[s("li",[t._v("当超时时间 "),s("strong",[t._v("RTO 较大")]),t._v("时，重发就慢，丢了老半天才重发，没有效率，性能差；")]),t._v(" "),s("li",[t._v("当超时时间 "),s("strong",[t._v("RTO 较小")]),t._v("时，会导致可能并没有丢就重发，于是重发的就快，会增加网络拥塞，导致更多的超时，更多的超时导致更多的重发。")])])]),t._v(" "),s("li",[s("font",{attrs:{color:"cornflowerblue"}},[t._v("超时重传时间 RTO 的值应该略大于报文往返  RTT 的值")]),t._v("。")],1),t._v(" "),s("li",[t._v("估计往返时间，通常需要采样以下两个:\n"),s("ul",[s("li",[t._v("需要 TCP 通过采样 RTT 的时间，然后进行加权平均，算出一个平滑 RTT 的值，而且这个值还是要不断变化的，因为网络状况不断地变化。")]),t._v(" "),s("li",[t._v("除了采样 RTT，还要采样 RTT 的波动范围，这样就避免如果 RTT 有一个大的波动的话，很难被发现的情况。")]),t._v(" "),s("li",[t._v("RFC6289 建议使用以下的公式计算 RTO，其中 "),s("code",[t._v("SRTT")]),t._v(" 是计算平滑的RTT ，"),s("code",[t._v("DevRTR")]),t._v(" 是计算平滑的RTT 与 最新 RTT 的差距。在 Linux 下，"),s("strong",[t._v("α = 0.125，β = 0.25， μ = 1，∂ = 4")]),t._v("。别问怎么来的，问就是大量实验中调出来的。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(773),alt:"image-20220125131832278"}})]),t._v(" "),s("li",[t._v("如果超时重发的数据，再次超时的时候，又需要重传的时候，TCP 的策略是"),s("strong",[t._v("超时间隔加倍")]),t._v("。也就是"),s("strong",[t._v("每当遇到一次超时重传的时候，都会将下一次超时时间间隔设为先前值的两倍。两次超时，就说明网络环境差，不宜频繁反复发送")]),t._v("。")])])])]),t._v(" "),s("h4",{attrs:{id:"超时触发重传存在的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#超时触发重传存在的问题"}},[t._v("#")]),t._v(" 超时触发重传存在的问题")]),t._v(" "),s("ul",[s("li",[t._v("超时周期可能相对较长，可以用「快速重传」机制来解决超时重发的时间等待。")])]),t._v(" "),s("h4",{attrs:{id:"快速重传"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速重传"}},[t._v("#")]),t._v(" "),s("strong",[t._v("快速重传")])]),t._v(" "),s("ul",[s("li",[t._v("不以时间为驱动，而是以数据驱动重传。")]),t._v(" "),s("li",[t._v("如下图，快速重传的工作方式是当收到三个相同的 ACK 报文时，会在定时器过期之前，重传丢失的报文段。但是，是重传 Seq2 呢？还是重传 Seq2、Seq3、Seq4、Seq5 呢？因为发送端并不清楚这连续的三个 Ack 2 是谁传回来的。根据 TCP 不同的实现，以上两种情况都是有可能的。可见，这是一把双刃剑。")]),t._v(" "),s("li",[s("font",{attrs:{color:"cornflowerblue"}},[t._v("为了解决不知道该重传哪些 TCP 报文，于是就有SACK方法")]),t._v("。")],1),t._v(" "),s("li",[s("img",{attrs:{src:v(774),alt:"image-20220125132547639"}})])]),t._v(" "),s("h4",{attrs:{id:"sack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sack"}},[t._v("#")]),t._v(" "),s("strong",[t._v("SACK")])]),t._v(" "),s("ul",[s("li",[t._v("Selective Acknowledgment 选择性确认。")]),t._v(" "),s("li",[t._v("这种方式需要在 TCP 头部「选项」字段里加一个 "),s("code",[t._v("SACK")]),t._v(" 的东西，它"),s("strong",[t._v("可以将缓存的地图发送给发送方")]),t._v("，这样发送方就可以知道哪些数据收到了，哪些数据没收到，知道了这些信息，就可以"),s("strong",[t._v("只重传丢失的数据")]),t._v("。")]),t._v(" "),s("li",[t._v("如下图，发送方收到了三次同样的 ACK 确认报文，于是就会触发快速重发机制，通过 "),s("code",[t._v("SACK")]),t._v(" 信息发现只有 "),s("code",[t._v("200~299")]),t._v(" 这段数据丢失，则重发时，就只选择了这个 TCP 段进行重复。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(775),alt:"image-20220125133547538"}})]),t._v(" "),s("li",[t._v("如果要支持 "),s("code",[t._v("SACK")]),t._v("，必须双方都要支持。在 Linux 下，可以通过 "),s("code",[t._v("net.ipv4.tcp_sack")]),t._v(" 参数打开这个功能（Linux 2.4 后默认打开）。")])]),t._v(" "),s("h4",{attrs:{id:"d-sack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#d-sack"}},[t._v("#")]),t._v(" "),s("strong",[t._v("D-SACK")])]),t._v(" "),s("ul",[s("li",[t._v("Duplicate SACK 又称 "),s("code",[t._v("D-SACK")]),t._v("，其主要"),s("strong",[t._v("使用了 SACK 来告诉「发送方」有哪些数据被重复接收了")]),t._v("。")]),t._v(" "),s("li",[t._v("在 Linux 下可以通过 "),s("code",[t._v("net.ipv4.tcp_dsack")]),t._v(" 参数开启/关闭这个功能（Linux 2.4 后默认打开）。")]),t._v(" "),s("li",[t._v("下面举例两个栗子，来说明 "),s("code",[t._v("D-SACK")]),t._v(" 的作用。\n"),s("ul",[s("li",[s("strong",[t._v("ACK 丢包")]),t._v(" "),s("ul",[s("li",[t._v("「接收方」发给「发送方」的两个 ACK 确认应答都丢失了，所以发送方超时后，重传第一个数据包（3000 ~ 3499）。")]),t._v(" "),s("li",[s("strong",[t._v("于是「接收方」发现数据是重复收到的，于是回了一个 SACK = 3000~3500")]),t._v("，告诉「发送方」 3000~3500 的数据早已被接收了，因为 ACK 都到了 4000 了，已经意味着 4000 之前的所有数据都已收到，所以这个 SACK 就代表着 "),s("code",[t._v("D-SACK")]),t._v("。")]),t._v(" "),s("li",[t._v("这样「发送方」就知道了，数据没有丢，是「接收方」的 ACK 确认报文丢了。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(776),alt:"image-20220125134059057"}})])])]),t._v(" "),s("li",[s("strong",[t._v("网络延迟")]),t._v(" "),s("ul",[s("li",[t._v("数据包（1000~1499） 被网络延迟了，导致「发送方」没有收到 Ack 1500 的确认报文。")]),t._v(" "),s("li",[t._v("而后面报文到达的三个相同的 ACK 确认报文，就触发了快速重传机制，但是在重传后，被延迟的数据包（1000~1499）又到了「接收方」；")]),t._v(" "),s("li",[s("strong",[t._v("所以「接收方」回了一个 SACK=1000~1500，因为 ACK 已经到了 3000，所以这个 SACK 是 D-SACK，表示收到了重复的包")]),t._v("。")]),t._v(" "),s("li",[t._v("这样发送方就知道快速重传触发的原因不是发出去的包丢了，也不是因为回应的 ACK 包丢了，而是因为网络延迟了。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(777),alt:"image-20220125135017862"}})])])])])])]),t._v(" "),s("h4",{attrs:{id:"d-sack好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#d-sack好处"}},[t._v("#")]),t._v(" D-SACK好处")]),t._v(" "),s("ul",[s("li",[t._v("可以让「发送方」知道，是发出去的包丢了，还是接收方回应的 ACK 包丢了;")]),t._v(" "),s("li",[t._v("可以知道是不是「发送方」的数据包被网络延迟了;")]),t._v(" "),s("li",[t._v("可以知道网络中是不是把「发送方」的数据包给复制了;")])]),t._v(" "),s("h3",{attrs:{id:"滑动窗口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口"}},[t._v("#")]),t._v(" 滑动窗口")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("TCP 提供一种机制可以让「发送方」根据「接收方」的实际接收能力控制发送的数据量，这就是滑动窗口的由来。")])])]),t._v(" "),s("li",[s("p",[t._v("TCP 引入了"),s("strong",[t._v("窗口")]),t._v("这个概念。即使在往返时间较长的情况下，它也不会降低网络通信的效率。")])]),t._v(" "),s("li",[s("p",[t._v("有了窗口，就可以指定窗口大小，窗口大小就是指"),s("strong",[t._v("无需等待确认应答，而可以继续发送数据的最大值")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("窗口的实现实际上是操作系统开辟的一个缓存空间，发送方主机在等到确认应答返回之前，必须在缓冲区中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓存区清除。")])]),t._v(" "),s("li",[s("p",[t._v("假设窗口大小为 "),s("code",[t._v("3")]),t._v(" 个 TCP 段，那么发送方就可以「连续发送」 "),s("code",[t._v("3")]),t._v(" 个 TCP 段，并且中途若有 ACK 丢失，可以通过「下一个确认应答进行确认」。如下图：图中的 ACK 600 确认应答报文丢失，也没关系，因为可以通话下一个确认应答进行确认，只要发送方收到了 ACK 700 确认应答，就意味着 700 之前的所有数据「接收方」都收到了。这个模式就叫"),s("strong",[t._v("累计确认")]),t._v("或者"),s("strong",[t._v("累计应答")]),t._v("。")])]),t._v(" "),s("li",[s("p",[s("img",{attrs:{src:v(778),alt:"image-20220125144032383"}})])])]),t._v(" "),s("h4",{attrs:{id:"窗口大小由哪一方决定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#窗口大小由哪一方决定"}},[t._v("#")]),t._v(" 窗口大小由哪一方决定？")]),t._v(" "),s("ul",[s("li",[t._v("TCP 头里有一个字段叫 "),s("code",[t._v("Window")]),t._v("，也就是窗口大小。")]),t._v(" "),s("li",[t._v("这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。")]),t._v(" "),s("li",[t._v("所以，通常窗口的大小是由接收方的决定的。")]),t._v(" "),s("li",[t._v("发送方发送的数据大小不能超过接收方的窗口大小，否则接收方就无法正常接收到数据。")])]),t._v(" "),s("h4",{attrs:{id:"发送方的滑动窗口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发送方的滑动窗口"}},[t._v("#")]),t._v(" 发送方的滑动窗口")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("#1 是已发送并收到 ACK确认的数据：1~31 字节")])]),t._v(" "),s("li",[s("p",[t._v("#2 是已发送但未收到 ACK确认的数据：32~45 字节")])]),t._v(" "),s("li",[s("p",[t._v("#3 是未发送但总大小在接收方处理范围内（接收方还有空间）：46~51字节")])]),t._v(" "),s("li",[s("p",[t._v("#4 是未发送但总大小超过接收方处理范围（接收方没有空间）：52字节以后")])]),t._v(" "),s("li",[s("p",[t._v("程序是如何表示发送方的四个部分的呢？")]),t._v(" "),s("ul",[s("li",[t._v("TCP 滑动窗口方案使用三个指针来跟踪在四个传输类别中的每一个类别中的字节。其中两个指针是绝对指针（指特定的序列号），一个是相对指针（需要做偏移）。")]),t._v(" "),s("li",[s("code",[t._v("SND.WND")]),t._v("：表示发送窗口的大小（大小是由接收方指定的）；")]),t._v(" "),s("li",[s("code",[t._v("SND.UNA")]),t._v("：是一个绝对指针，它指向的是已发送但未收到确认的第一个字节的序列号，也就是 #2 的第一个字节。")]),t._v(" "),s("li",[s("code",[t._v("SND.NXT")]),t._v("：也是一个绝对指针，它指向未发送但可发送范围的第一个字节的序列号，也就是 #3 的第一个字节。")]),t._v(" "),s("li",[t._v("指向 #4 的第一个字节是个相对指针，它需要 "),s("code",[t._v("SND.UNA")]),t._v(" 指针加上 "),s("code",[t._v("SND.WND")]),t._v(" 大小的偏移量，就可以指向 #4 的第一个字节了。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("可用窗口大 = SND.WND -（SND.NXT - SND.UNA）")])])])]),t._v(" "),s("h4",{attrs:{id:"接收方的滑动窗口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接收方的滑动窗口"}},[t._v("#")]),t._v(" 接收方的滑动窗口")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("#1 + #2 是已成功接收并确认的数据（等待应用进程读取）；")])]),t._v(" "),s("li",[s("p",[t._v("#3 是未收到数据但可以接收的数据；")])]),t._v(" "),s("li",[s("p",[t._v("#4 未收到数据并不可以接收的数据；")])]),t._v(" "),s("li",[s("p",[t._v("其中三个接收部分，使用两个指针进行划分:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("RCV.WND")]),t._v("：表示接收窗口的大小，它会通告给发送方。")]),t._v(" "),s("li",[s("code",[t._v("RCV.NXT")]),t._v("：是一个指针，它指向期望从发送方发送来的下一个数据字节的序列号，也就是 #3 的第一个字节。")]),t._v(" "),s("li",[t._v("指向 #4 的第一个字节是个相对指针，它需要 "),s("code",[t._v("RCV.NXT")]),t._v(" 指针加上 "),s("code",[t._v("RCV.WND")]),t._v(" 大小的偏移量，就可以指向 #4 的第一个字节了。")])])])]),t._v(" "),s("h4",{attrs:{id:"接收窗口和发送窗口的大小是相等的吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接收窗口和发送窗口的大小是相等的吗"}},[t._v("#")]),t._v(" 接收窗口和发送窗口的大小是相等的吗？")]),t._v(" "),s("ul",[s("li",[t._v("并不是完全相等，接收窗口的大小是"),s("strong",[t._v("约等于")]),t._v("发送窗口的大小的。")]),t._v(" "),s("li",[t._v("因为滑动窗口并不是一成不变的。比如，当接收方的应用进程读取数据的速度非常快的话，这样的话接收窗口可以很快的就空缺出来。那么新的接收窗口大小，是通过 TCP 报文中的 Windows 字段来告诉发送方。那么这个传输过程是存在时延的，所以接收窗口和发送窗口是约等于的关系。")])]),t._v(" "),s("h4",{attrs:{id:"扩充窗口的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩充窗口的方法"}},[t._v("#")]),t._v(" 扩充窗口的方法？")]),t._v(" "),s("ul",[s("li",[t._v("在 TCP 选项字段定义了窗口扩大因子，用于扩大TCP通告窗口，使 TCP 的窗口大小从 2 个字节（16 位） 扩大为 30 位，所以此时窗口的最大值可以达到 1GB（2^30）。")]),t._v(" "),s("li",[t._v("Linux 中打开这一功能，需要把 tcp_window_scaling 配置设为 1（默认打开）：\n"),s("ul",[s("li",[s("img",{attrs:{src:v(779),alt:"image-20220130002500126"}})])])]),t._v(" "),s("li",[s("strong",[t._v("因为网络的传输能力是有限的，当发送方依据发送窗口，发送超过网络处理能力的报文时，路由器会直接丢弃这些报文。因此，缓冲区的内存并不是越大越好。")])])]),t._v(" "),s("h4",{attrs:{id:"如果确定最大传输速度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果确定最大传输速度"}},[t._v("#")]),t._v(" 如果确定最大传输速度？")]),t._v(" "),s("ul",[s("li",[t._v("TCP 的传输速度，受制于发送窗口与接收窗口，以及网络设备传输能力。其中，窗口大小由内核缓冲区大小决定。如果缓冲区与网络传输能力匹配，那么缓冲区的利用率就达到了最大化。")]),t._v(" "),s("li",[t._v("带宽时延积，它决定网络中飞行报文的大小，它的计算方式：\n"),s("ul",[s("li",[t._v("比如最大带宽是 100 MB/s，网络时延（RTT）是 10ms 时，意味着客户端到服务端的网络一共可以存放 100MB/s * 0.01s = 1MB 的字节。这 1MB 就是带宽时延积，也表示「飞行中」的 TCP 报文大小，它们就在网络线路、路由器等网络设备上。如果飞行报文超过了 1 MB，就会导致网络过载，容易丢包。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(780),alt:"image-20220130002911230"}})])])]),t._v(" "),s("li",[s("strong",[t._v("由于发送缓冲区大小决定了发送窗口的上限，而发送窗口又决定了「已发送未确认」的飞行报文的上限。因此，发送缓冲区不能超过「带宽时延积」。")]),t._v(" "),s("ul",[s("li",[t._v("如果发送缓冲区「超过」带宽时延积，超出的部分就没办法有效的网络传输，同时导致网络过载，容易丢包；")]),t._v(" "),s("li",[t._v("如果发送缓冲区「小于」带宽时延积，就不能很好的发挥出网络的传输效率。")])])])]),t._v(" "),s("h4",{attrs:{id:"怎么调整发送缓冲区大小"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么调整发送缓冲区大小"}},[t._v("#")]),t._v(" 怎么调整发送缓冲区大小？")]),t._v(" "),s("ul",[s("li",[t._v("发送缓冲区的范围通过 tcp_wmem 参数配置；\n"),s("ul",[s("li",[t._v("第一个数值是动态范围的最小值，4096 byte = 4K；")]),t._v(" "),s("li",[t._v("第二个数值是初始默认值，87380 byte ≈ 86K；")]),t._v(" "),s("li",[t._v("第三个数值是动态范围的最大值，4194304 byte = 4096K（4M）；")]),t._v(" "),s("li",[s("img",{attrs:{src:v(781),alt:"image-20220130003328475"}})])])]),t._v(" "),s("li",[s("strong",[t._v("发送缓冲区是自行调节的")]),t._v("，当发送方发送的数据被确认后，并且没有新的数据要发送，就会把发送缓冲区的内存释放掉")])]),t._v(" "),s("h4",{attrs:{id:"调节接收缓冲区范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调节接收缓冲区范围"}},[t._v("#")]),t._v(" 调节接收缓冲区范围")]),t._v(" "),s("ul",[s("li",[t._v("设置接收缓冲区范围的 tcp_rmem 参数：\n"),s("ul",[s("li",[t._v("第一个数值是动态范围的最小值，表示即使在内存压力下也可以保证的最小接收缓冲区大小，4096 byte = 4K；")]),t._v(" "),s("li",[t._v("第二个数值是初始默认值，87380 byte ≈ 86K；")]),t._v(" "),s("li",[t._v("第三个数值是动态范围的最大值，6291456 byte = 6144K（6M）；")]),t._v(" "),s("li",[s("img",{attrs:{src:v(782),alt:"image-20220130003645870"}})])])]),t._v(" "),s("li",[s("strong",[t._v("接收缓冲区可以根据系统空闲内存的大小来调节接收窗口")]),t._v("：\n"),s("ul",[s("li",[t._v("如果系统的空闲内存很多，就可以自动把缓冲区增大一些，这样传给对方的接收窗口也会变大，因而提升发送方发送的传输数据数量；")]),t._v(" "),s("li",[t._v("反正，如果系统的内存很紧张，就会减少缓冲区，这虽然会降低传输效率，可以保证更多的并发连接正常工作；")])])]),t._v(" "),s("li",[t._v("发送缓冲区的调节功能是自动开启的，"),s("strong",[t._v("而接收缓冲区则需要配置 tcp_moderate_rcvbuf 为 1 来开启调节功能")]),t._v("：\n"),s("ul",[s("li",[s("img",{attrs:{src:v(783),alt:"image-20220130003751707"}})])])])]),t._v(" "),s("h4",{attrs:{id:"调节-tcp-内存范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调节-tcp-内存范围"}},[t._v("#")]),t._v(" 调节 TCP 内存范围")]),t._v(" "),s("ul",[s("li",[t._v("接收缓冲区调节时，怎么知道当前内存是否紧张或充分呢？这是通过 tcp_mem 配置完成的：\n"),s("ul",[s("li",[t._v("下面三个数字单位不是字节，而是「页面大小」，1 页表示 4KB，它们分别表示：\n"),s("ul",[s("li",[t._v("当 TCP 内存小于第 1 个值时，不需要进行自动调节；")]),t._v(" "),s("li",[t._v("在第 1 和第 2 个值之间时，内核开始调节接收缓冲区的大小；")]),t._v(" "),s("li",[t._v("大于第 3 个值时，内核不再为 TCP 分配新内存，此时新连接是无法建立的；")])])]),t._v(" "),s("li",[s("img",{attrs:{src:v(784),alt:"image-20220130003911225"}})]),t._v(" "),s("li",[t._v("一般情况下这些值是在系统启动时根据系统内存数量计算得到的。根据当前 tcp_mem 最大内存页面数是 177120，当内存为 (177120 * 4) / 1024K ≈ 692M 时，系统将无法为新的 TCP 连接分配内存，即 TCP 连接将被拒绝。")])])])]),t._v(" "),s("h4",{attrs:{id:"根据实际场景调节的策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#根据实际场景调节的策略"}},[t._v("#")]),t._v(" 根据实际场景调节的策略")]),t._v(" "),s("ul",[s("li",[t._v("在高并发服务器中，为了兼顾网速与大量的并发连接，"),s("strong",[t._v("我们应当保证缓冲区的动态调整的最大值达到带宽时延积，而最小值保持默认的 4K 不变即可。而对于内存紧张的服务而言，调低默认值是提高并发的有效手段")]),t._v("。")]),t._v(" "),s("li",[t._v("同时，如果这是网络 IO 型服务器，那么，"),s("strong",[t._v("调大 tcp_mem 的上限可以让 TCP 连接使用更多的系统内存，这有利于提升并发能力")]),t._v("。需要注意的是，tcp_wmem 和 tcp_rmem 的单位是字节，而 tcp_mem 的单位是页面大小。而且，"),s("strong",[t._v("千万不要在 socket 上直接设置 SO_SNDBUF 或者 SO_RCVBUF，这样会关闭缓冲区的动态调整功能")]),t._v("。")])]),t._v(" "),s("h3",{attrs:{id:"流量控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流量控制"}},[t._v("#")]),t._v(" 流量控制")]),t._v(" "),s("ul",[s("li",[t._v("发送方不能无脑的发数据给接收方，要考虑接收方处理能力。如果一直无脑的发数据给对方，但对方处理不过来，那么就会导致触发重发机制，从而导致网络流量的无端的浪费。为了解决这种现象发生，"),s("strong",[t._v("TCP 提供一种机制可以让「发送方」根据「接收方」的实际接收能力控制发送的数据量，这就是所谓的流量控制")]),t._v("。")]),t._v(" "),s("li",[t._v("当服务端系统资源非常紧张的时候，操心系统可能会直接减少了接收缓冲区大小，这时应用程序又无法及时读取缓存数据，那么这时候就有严重的事情发生了，会出现数据包丢失的现象。"),s("strong",[t._v("为了防止这种情况发生，TCP 规定是不允许同时减少缓存又收缩窗口的，而是采用先收缩窗口，过段时间在减少缓存，这样就可以避免了丢包情况")]),t._v("。")])]),t._v(" "),s("h4",{attrs:{id:"窗口关闭"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#窗口关闭"}},[t._v("#")]),t._v(" 窗口关闭")]),t._v(" "),s("ul",[s("li",[t._v("如果窗口大小为 0 时，就会阻止发送方给接收方传递数据，直到窗口变为非 0 为止，这就是窗口关闭。")]),t._v(" "),s("li",[t._v("接收方向发送方通告窗口大小时，是通过 "),s("code",[t._v("ACK")]),t._v(" 报文来通告的。")]),t._v(" "),s("li",[t._v("窗口关闭潜在的危险：\n"),s("ul",[s("li",[t._v("如果这个通告窗口的 "),s("code",[t._v("ACK")]),t._v(" 报文在网络中丢失了，那麻烦就大了。")]),t._v(" "),s("li",[t._v("这会导致发送方一直等待接收方的非 0 窗口通知，接收方也一直等待发送方的数据，如不不采取措施，这种相互等待的过程，会造成了死锁的现象。")])])]),t._v(" "),s("li",[t._v("TCP 是如何解决窗口关闭时，潜在的死锁现象呢？\n"),s("ul",[s("li",[t._v("TCP 为每个连接设有一个持续定时器，"),s("strong",[t._v("只要 TCP 连接一方收到对方的零窗口通知，就启动持续计时器")]),t._v("。如果持续计时器超时，就会发送"),s("strong",[t._v("窗口探测 ( Window probe ) 报文")]),t._v("，而对方在确认这个探测报文时，给出自己现在的接收窗口大小。")]),t._v(" "),s("li",[t._v("如果接收窗口仍然为 0，那么收到这个报文的一方就会重新启动持续计时器；")]),t._v(" "),s("li",[t._v("如果接收窗口不是 0，那么死锁的局面就可以被打破了。")]),t._v(" "),s("li",[t._v("窗口探查探测的次数一般为 3 次，每次大约 30-60 秒（不同的实现可能会不一样）。如果 3 次过后接收窗口还是 0 的话，有的 TCP 实现就会发 "),s("code",[t._v("RST")]),t._v(" 报文来中断连接。")])])])]),t._v(" "),s("h4",{attrs:{id:"糊涂窗口综合症"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#糊涂窗口综合症"}},[t._v("#")]),t._v(" 糊涂窗口综合症")]),t._v(" "),s("ul",[s("li",[t._v("如果接收方太忙了，来不及取走接收窗口里的数据，那么就会导致发送方的发送窗口越来越小。到最后，"),s("strong",[t._v("如果接收方腾出几个字节并告诉发送方现在有几个字节的窗口，而发送方会义无反顾地发送这几个字节，这就是糊涂窗口综合症")]),t._v("。")]),t._v(" "),s("li",[t._v("糊涂窗口综合症的现象是可以发生在发送方和接收方：\n"),s("ul",[s("li",[t._v("接收方可以通告一个小的窗口；")]),t._v(" "),s("li",[t._v("而发送方可以发送小数据；")])])]),t._v(" "),s("li",[t._v("要解决糊涂窗口综合症，就解决上面两个问题就可以了：\n"),s("ul",[s("li",[t._v("让接收方不通告小窗口给发送方；")]),t._v(" "),s("li",[t._v("让发送方避免发送小数据；")])])])]),t._v(" "),s("h4",{attrs:{id:"怎么让接收方不通告小窗口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么让接收方不通告小窗口"}},[t._v("#")]),t._v(" 怎么让接收方不通告小窗口？")]),t._v(" "),s("ul",[s("li",[t._v("当「窗口大小」小于 min( MSS，缓存空间/2 ) ，也就是小于 MSS 与 1/2 缓存大小中的最小值时，就会向发送方通告窗口为 "),s("code",[t._v("0")]),t._v("，也就阻止了发送方再发数据过来。")]),t._v(" "),s("li",[t._v("等到接收方处理了一些数据后，窗口大小 >= MSS，或者接收方缓存空间有一半可以使用，就可以把窗口打开让发送方发送数据过来。")])]),t._v(" "),s("h4",{attrs:{id:"怎么让发送方避免发送小数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么让发送方避免发送小数据"}},[t._v("#")]),t._v(" 怎么让发送方避免发送小数据？")]),t._v(" "),s("ul",[s("li",[t._v("使用 Nagle 算法，该算法的思路是延时处理，它满足以下两个条件中的一条才可以发送数据：\n"),s("ul",[s("li",[t._v("要等到窗口大小 >= "),s("code",[t._v("MSS")]),t._v(" 或是 数据大小 >= "),s("code",[t._v("MSS")]),t._v("；")]),t._v(" "),s("li",[t._v("收到之前发送数据的 "),s("code",[t._v("ack")]),t._v(" 回包。")])])]),t._v(" "),s("li",[t._v("Nagle 算法默认是打开的，如果对于一些需要小数据包交互的场景的程序，比如，telnet 或 ssh 这样的交互性比较强的程序，则需要关闭 Nagle 算法。")]),t._v(" "),s("li",[t._v("可以在 Socket 设置 "),s("code",[t._v("TCP_NODELAY")]),t._v(" 选项来关闭这个算法（关闭 Nagle 算法没有全局参数，需要根据每个应用自己的特点来关闭）")])]),t._v(" "),s("h3",{attrs:{id:"拥塞控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制"}},[t._v("#")]),t._v(" 拥塞控制")]),t._v(" "),s("h4",{attrs:{id:"为什么要有拥塞控制呀-不是有流量控制了吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有拥塞控制呀-不是有流量控制了吗"}},[t._v("#")]),t._v(" 为什么要有拥塞控制呀，不是有流量控制了吗？")]),t._v(" "),s("ul",[s("li",[t._v("流量控制是避免「发送方」的数据填满「接收方」的缓存，但是并不知道网络的中发生了什么。")]),t._v(" "),s("li",[t._v("在网络出现拥堵时，如果继续发送大量数据包，可能会导致数据包时延、丢失等，这时 TCP 就会重传数据，但是一重传就会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，这个情况就会进入恶性循环被不断地放大。")]),t._v(" "),s("li",[s("strong",[t._v("拥塞控制")]),t._v("，目的就是"),s("strong",[t._v("避免「发送方」的数据填满整个网络。")])])]),t._v(" "),s("h4",{attrs:{id:"什么是拥塞窗口-和发送窗口有什么关系呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是拥塞窗口-和发送窗口有什么关系呢"}},[t._v("#")]),t._v(" 什么是拥塞窗口？和发送窗口有什么关系呢？")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("拥塞窗口 cwnd")]),t._v("是发送方维护的一个 的状态变量，它会根据"),s("strong",[t._v("网络的拥塞程度动态变化的")]),t._v("。")]),t._v(" "),s("li",[t._v("发送窗口 "),s("code",[t._v("swnd")]),t._v(" 和接收窗口 "),s("code",[t._v("rwnd")]),t._v(" 是约等于的关系，那么由于入了拥塞窗口的概念后，此时发送窗口的值是swnd = min(cwnd, rwnd)，也就是拥塞窗口和接收窗口中的最小值。")])]),t._v(" "),s("h4",{attrs:{id:"拥塞窗口-cwnd-变化的规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拥塞窗口-cwnd-变化的规则"}},[t._v("#")]),t._v(" 拥塞窗口 "),s("code",[t._v("cwnd")]),t._v(" 变化的规则")]),t._v(" "),s("ul",[s("li",[t._v("只要网络中没有出现拥塞，"),s("code",[t._v("cwnd")]),t._v(" 就会增大；")]),t._v(" "),s("li",[t._v("但网络中出现了拥塞，"),s("code",[t._v("cwnd")]),t._v(" 就减少；")])]),t._v(" "),s("h4",{attrs:{id:"怎么知道当前网络是否出现了拥塞呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么知道当前网络是否出现了拥塞呢"}},[t._v("#")]),t._v(" 怎么知道当前网络是否出现了拥塞呢？")]),t._v(" "),s("ul",[s("li",[t._v("只要「发送方」没有在规定时间内接收到 "),s("code",[t._v("ACK")]),t._v(" 应答报文，也就是"),s("strong",[t._v("发生了超时重传，就会认为网络出现了拥塞")]),t._v("。")])]),t._v(" "),s("h4",{attrs:{id:"拥塞控制有哪些控制算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制有哪些控制算法"}},[t._v("#")]),t._v(" 拥塞控制有哪些控制算法？")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("慢启动")]),t._v(" "),s("ul",[s("li",[t._v("慢启动的意思就是一点一点的提高发送数据包的数量。")]),t._v(" "),s("li",[t._v("慢启动的算法记住一个规则就行："),s("strong",[t._v("当发送方每收到一个 ACK，就拥塞窗口 cwnd 的大小就会加 1")]),t._v("。发包的个数是"),s("strong",[t._v("指数性的增长")]),t._v("。")]),t._v(" "),s("li",[t._v("慢启动门限  "),s("code",[t._v("ssthresh")]),t._v(" （slow start threshold）状态变量。\n"),s("ul",[s("li",[t._v("当 "),s("code",[t._v("cwnd < ssthresh")]),t._v(" 时，使用慢启动算法。")]),t._v(" "),s("li",[t._v("当 "),s("code",[t._v("cwnd >= ssthresh")]),t._v(" 时，就会使用「拥塞避免算法」。")])])]),t._v(" "),s("li",[s("img",{attrs:{src:v(785),alt:"img"}})])])]),t._v(" "),s("li",[s("strong",[t._v("拥塞避免")]),t._v(" "),s("ul",[s("li",[t._v("一般来说 "),s("code",[t._v("ssthresh")]),t._v(" 的大小是 "),s("code",[t._v("65535")]),t._v(" 字节。")]),t._v(" "),s("li",[t._v("拥塞避免算法就是将原本慢启动算法的指数增长变成了线性增长，还是增长阶段，但是增长速度缓慢了一些。")]),t._v(" "),s("li",[t._v("但一直增长后，网络就会慢慢进入了拥塞的状况了，于是就会出现丢包现象，这时就需要对丢失的数据包进行重传。当触发了重传机制，也就进入了「拥塞发生算法」。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(786),alt:"image-20220203133101960"}})])])]),t._v(" "),s("li",[s("strong",[t._v("拥塞发生")]),t._v(" "),s("ul",[s("li",[t._v("当网络出现拥塞，也就是会发生数据包重传，重传机制主要有两种：\n"),s("ul",[s("li",[t._v("超时重传，则发生超时重传的拥塞发生算法。\n"),s("ul",[s("li",[s("code",[t._v("ssthresh")]),t._v(" 设为 "),s("code",[t._v("cwnd/2")]),t._v("，cwnd"),s("code",[t._v("重置为")]),t._v("1；")]),t._v(" "),s("li",[t._v("接着，就重新开始慢启动，慢启动是会突然减少数据流的。这真是一旦「超时重传」，马上回到解放前。但是这种方式太激进了，反应也很强烈，会造成网络卡顿。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(787),alt:"image-20220203133830656"}})])])]),t._v(" "),s("li",[t._v("快速重传，发生快速重传的拥塞发生算法。\n"),s("ul",[s("li",[s("code",[t._v("cwnd = cwnd/2")]),t._v(" ，也就是设置为原来的一半，"),s("code",[t._v("ssthresh = cwnd")]),t._v("，进入快速恢复算法；")]),t._v(" "),s("li",[t._v("快速重传和快速恢复算法一般同时使用，快速恢复算法是认为，你还能收到 3 个重复 ACK 说明网络也不那么糟糕，所以没有必要像 "),s("code",[t._v("RTO")]),t._v(" 超时那么强烈。")])])])])])])]),t._v(" "),s("li",[s("strong",[t._v("快速恢复")]),t._v(" "),s("ul",[s("li",[t._v("拥塞窗口 "),s("code",[t._v("cwnd = ssthresh + 3")]),t._v(" （ 3 的意思是确认有 3 个数据包被收到了）；")]),t._v(" "),s("li",[t._v("重传丢失的数据包；")]),t._v(" "),s("li",[t._v("如果再收到重复的 ACK，那么 cwnd 增加 1；")]),t._v(" "),s("li",[t._v("如果收到新数据的 ACK 后，设置 cwnd 为 ssthresh，接着就进入了拥塞避免算法。")]),t._v(" "),s("li",[t._v("也就是没有像「超时重传」一夜回到解放前，而是还在比较高的值，后续呈线性增长。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(788),alt:"image-20220203133939668"}})])])])]),t._v(" "),s("h3",{attrs:{id:"tcp半连接与全连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp半连接与全连接"}},[t._v("#")]),t._v(" TCP半连接与全连接")]),t._v(" "),s("h4",{attrs:{id:"什么是tcp半连接队列和全连接队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是tcp半连接队列和全连接队列"}},[t._v("#")]),t._v(" 什么是TCP半连接队列和全连接队列？")]),t._v(" "),s("ul",[s("li",[t._v("在 TCP 三次握手的时候，Linux 内核会维护两个队列，分别是：\n"),s("ul",[s("li",[t._v("半连接队列，也称 SYN 队列；")]),t._v(" "),s("li",[t._v("全连接队列，也称 accepet 队列；")])])]),t._v(" "),s("li",[t._v("服务端收到客户端发起的 SYN 请求后，"),s("strong",[t._v("内核会把该连接存储到半连接队列")]),t._v("，并向客户端响应 SYN+ACK，接着客户端会返回 ACK，服务端收到第三次握手的 ACK 后，"),s("strong",[t._v("内核会把连接从半连接队列移除，然后创建新的完全的连接，并将其添加到 accept 队列，等待进程调用 accept 函数时把连接取出来。")])]),t._v(" "),s("li",[t._v("不管是半连接队列还是全连接队列，都有最大长度限制，超过限制时，内核会直接丢弃，或返回 RST 包。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(789),alt:"image-20220126094907885"}})])]),t._v(" "),s("h4",{attrs:{id:"如何知道应用程序的-tcp-全连接队列大小"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何知道应用程序的-tcp-全连接队列大小"}},[t._v("#")]),t._v(" 如何知道应用程序的 TCP 全连接队列大小？")]),t._v(" "),s("ul",[s("li",[t._v("在服务端可以使用 "),s("code",[t._v("ss")]),t._v(" 命令，来查看 TCP 全连接队列的情况。但取的 "),s("code",[t._v("Recv-Q/Send-Q")]),t._v(" 在「LISTEN 状态」和「非 LISTEN 状态」所表达的含义是不同的。")]),t._v(" "),s("li",[s("strong",[t._v("在「LISTEN 状态」时，"),s("code",[t._v("Recv-Q/Send-Q")]),t._v(" 表示的含义如下图")]),t._v("：\n"),s("ul",[s("li",[t._v("Recv-Q：当前全连接队列的大小，也就是当前已完成三次握手并等待服务端 "),s("code",[t._v("accept()")]),t._v(" 的 TCP 连接个数；")]),t._v(" "),s("li",[t._v("Send-Q：当前全连接最大队列长度，上面的输出结果说明监听 8088 端口的 TCP 服务进程，最大全连接长度为 128；")]),t._v(" "),s("li",[s("img",{attrs:{src:v(790),alt:"image-20220126105723901"}})])])]),t._v(" "),s("li",[s("strong",[t._v("在「非 LISTEN 状态」时，"),s("code",[t._v("Recv-Q/Send-Q")]),t._v(" 表示的含义如下图")]),t._v("：\n"),s("ul",[s("li",[t._v("Recv-Q：已收到但未被应用进程读取的字节数；")]),t._v(" "),s("li",[t._v("Send-Q：已发送但未收到确认的字节数；")]),t._v(" "),s("li",[s("img",{attrs:{src:v(791),alt:"image-20220126111755789"}})])])])]),t._v(" "),s("h4",{attrs:{id:"如何模拟-tcp-全连接队列溢出的场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何模拟-tcp-全连接队列溢出的场景"}},[t._v("#")]),t._v(" 如何模拟 TCP 全连接队列溢出的场景？")]),t._v(" "),s("ul",[s("li",[t._v("压测工具："),s("code",[t._v("wrk")]),t._v("，一款简单的 HTTP 压测工具，能够在单机多核 CPU 的条件下，使用系统自带的高性能 I/O 机制，通过多线程和事件模式，对目标机器产生大量的负载。\n"),s("ul",[s("li",[s("img",{attrs:{src:v(792),alt:"image-20220126112410338"}})])])]),t._v(" "),s("li",[t._v("在服务端可以使用 "),s("code",[t._v("ss")]),t._v(" 命令，来查看当前 TCP 全连接队列的情况：\n"),s("ul",[s("li",[s("img",{attrs:{src:v(793),alt:"image-20220126112755321"}})])])]),t._v(" "),s("li",[s("strong",[t._v("当超过了 TCP 最大全连接队列，服务端则会丢掉后续进来的 TCP 连接")]),t._v("，丢掉的 TCP 连接的个数会被统计起来，我们可以使用 netstat -s 命令来查看：可看到的 41150 times ，表示全连接队列溢出的次数，注意这个是累计值。可以隔几秒钟执行下，如果这个数字一直在增加的话肯定全连接队列偶尔满了。\n"),s("ul",[s("li",[s("img",{attrs:{src:v(794),alt:"image-20220126112835869"}})])])]),t._v(" "),s("li",[s("strong",[t._v("当服务端并发处理大量请求时，如果 TCP 全连接队列过小，就容易溢出。发生 TCP 全连接队溢出的时候，后续的请求就会被丢弃，这样就会出现服务端请求数量上不去的现象。")])])]),t._v(" "),s("h4",{attrs:{id:"全连接队列满了-就只会丢弃连接吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全连接队列满了-就只会丢弃连接吗"}},[t._v("#")]),t._v(" 全连接队列满了，就只会丢弃连接吗？")]),t._v(" "),s("ul",[s("li",[t._v("实际上，丢弃连接只是 Linux 的默认行为，我们还可以选择向客户端发送 RST 复位报文，告诉客户端连接已经建立失败。\n"),s("ul",[s("li",[t._v("tcp_abort_on_overflow 共有两个值分别是 0 和 1，其分别表示：\n"),s("ul",[s("li",[t._v("0 ：表示如果全连接队列满了，那么 server 扔掉 client  发过来的 ack ；")]),t._v(" "),s("li",[t._v("1 ：表示如果全连接队列满了，那么 server 发送一个 "),s("code",[t._v("reset")]),t._v(" 包给 client，表示废掉这个握手过程和这个连接；")])])])])]),t._v(" "),s("li",[t._v("想知道客户端连接不上服务端，是不是服务端 TCP 全连接队列满的原因，那么可以把 tcp_abort_on_overflow 设置为 1，这时如果在客户端异常中可以看到很多 "),s("code",[t._v("connection reset by peer")]),t._v(" 的错误，那么就可以证明是由于服务端 TCP 全连接队列溢出的问题。")]),t._v(" "),s("li",[t._v("通常情况下，应当把 tcp_abort_on_overflow 设置为 0，因为这样更有利于应对突发流量。\n"),s("ul",[s("li",[t._v("举个例子，当 TCP 全连接队列满导致服务器丢掉了 ACK，与此同时，客户端的连接状态却是 ESTABLISHED，进程就在建立好的连接上发送请求。只要服务器没有为请求回复 ACK，请求就会被多次"),s("strong",[t._v("重发")]),t._v("。如果服务器上的进程只是"),s("strong",[t._v("短暂的繁忙造成 accept 队列满，那么当 TCP 全连接队列有空位时，再次接收到的请求报文由于含有 ACK，仍然会触发服务器端成功建立连接。")])]),t._v(" "),s("li",[t._v("所以，tcp_abort_on_overflow 设为 0 可以提高连接建立的成功率，只有你非常肯定 TCP 全连接队列会长期溢出时，才能设置为 1 以尽快通知客户端。")])])])]),t._v(" "),s("h4",{attrs:{id:"如何增大-tcp-全连接队列呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何增大-tcp-全连接队列呢"}},[t._v("#")]),t._v(" 如何增大 TCP 全连接队列呢？")]),t._v(" "),s("ul",[s("li",[t._v("当发现 TCP 全连接队列发生溢出的时候，我们就需要增大该队列的大小，以便可以应对客户端大量的请求。")]),t._v(" "),s("li",[s("strong",[t._v("TCP 全连接队列足最大值取决于 somaxconn 和 backlog 之间的最小值，也就是 min(somaxconn, backlog)")]),t._v("。\n"),s("ul",[s("li",[s("code",[t._v("somaxconn")]),t._v(" 是 Linux 内核的参数，默认值是 128，可以通过 "),s("code",[t._v("/proc/sys/net/core/somaxconn")]),t._v(" 来设置其值；")]),t._v(" "),s("li",[s("code",[t._v("backlog")]),t._v(" 是 "),s("code",[t._v("listen(int sockfd, int backlog)")]),t._v(" 函数中的 backlog 大小，Nginx 默认值是 511，可以通过修改配置文件设置其长度；")])])]),t._v(" "),s("li",[t._v("如果持续不断地有连接因为 TCP 全连接队列溢出被丢弃，应调大 backlog 以及 somaxconn 参数。")])]),t._v(" "),s("h4",{attrs:{id:"如何查看-tcp-半连接队列长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何查看-tcp-半连接队列长度"}},[t._v("#")]),t._v(" 如何查看 TCP 半连接队列长度？")]),t._v(" "),s("ul",[s("li",[t._v("可抓住 TCP 半连接的特点，就是服务端处于 "),s("code",[t._v("SYN_RECV")]),t._v(" 状态的TCP连接，就是在 TCP 半连接队列。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(795),alt:"image-20220127230742897"}})])]),t._v(" "),s("h4",{attrs:{id:"如何模拟-tcp-半连接队列溢出场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何模拟-tcp-半连接队列溢出场景"}},[t._v("#")]),t._v(" 如何模拟 TCP 半连接队列溢出场景？")]),t._v(" "),s("ul",[s("li",[t._v("对服务端一直发送 TCP SYN 包，但是不回第三次握手 ACK，这样就会使得服务端有大量的处于 "),s("code",[t._v("SYN_RECV")]),t._v(" 状态的 TCP 连接。")]),t._v(" "),s("li",[t._v("也就是所谓的 SYN 洪泛、SYN 攻击、DDos 攻击。")]),t._v(" "),s("li",[t._v("实验使用 "),s("code",[t._v("hping3")]),t._v(" 工具模拟 SYN 攻击。\n"),s("ul",[s("li",[s("img",{attrs:{src:v(796),alt:"image-20220127231255350"}})]),t._v(" "),s("li",[t._v("当服务端受到 SYN 攻击后，连接服务端 ssh 就会断开了，无法再连上。只能在服务端主机上执行查看当前 TCP 半连接队列大小：")]),t._v(" "),s("li",[s("img",{attrs:{src:v(797),alt:"image-20220127231328708"}})]),t._v(" "),s("li",[t._v("同时，还可以通过 netstat -s 观察半连接队列溢出的情况：如果下面输出的数值是"),s("strong",[t._v("累计值")]),t._v("，表示共有多少个 TCP 连接因为半连接队列溢出而被丢弃。"),s("strong",[t._v("隔几秒执行几次，如果有上升的趋势，说明当前存在半连接队列溢出的现象")]),t._v("。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(798),alt:"image-20220127231353364"}})])])])]),t._v(" "),s("h4",{attrs:{id:"tcp-半连接队列的最大值是如何决定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-半连接队列的最大值是如何决定"}},[t._v("#")]),t._v(" TCP 半连接队列的最大值是如何决定")]),t._v(" "),s("ul",[s("li",[t._v("半连接队列的大小并不单单只跟 "),s("code",[t._v("tcp_max_syn_backlog")]),t._v(" 有关系。")]),t._v(" "),s("li",[t._v("上面模拟 SYN 攻击场景时，服务端的 tcp_max_syn_backlog 的默认值如下：但是在测试的时候发现，服务端最多只有 256 个半连接队列，而不是 512，所以"),s("strong",[t._v("半连接队列的最大长度不一定由 tcp_max_syn_backlog 值决定的")]),t._v("。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(799),alt:"image-20220127233411703"}})]),t._v(" "),s("li",[s("strong",[t._v("半连接队列最大值不是单单由 max_syn_backlog 决定，还跟 somaxconn 和 backlog 有关系")]),t._v("。\n"),s("ul",[s("li",[t._v("当 max_syn_backlog > min(somaxconn, backlog) 时， 半连接队列最大值 max_qlen_log = min(somaxconn, backlog) * 2;")]),t._v(" "),s("li",[t._v("当 max_syn_backlog < min(somaxconn, backlog) 时， 半连接队列最大值 max_qlen_log = max_syn_backlog * 2;")])])]),t._v(" "),s("li",[t._v("每个 Linux 内核版本「理论」半连接最大值计算方式会不同。")])]),t._v(" "),s("h4",{attrs:{id:"如果-syn-半连接队列已满-只能丢弃连接吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果-syn-半连接队列已满-只能丢弃连接吗"}},[t._v("#")]),t._v(" 如果 SYN 半连接队列已满，只能丢弃连接吗？")]),t._v(" "),s("ul",[s("li",[t._v("并不是只丢弃，"),s("strong",[t._v("开启 syncookies 功能就可以在不使用 SYN 半连接队列的情况下成功建立连接")]),t._v("。")]),t._v(" "),s("li",[t._v("syncookies 参数主要有以下三个值：\n"),s("ul",[s("li",[t._v("0 值，表示关闭该功能；")]),t._v(" "),s("li",[t._v("1 值，表示仅当 SYN 半连接队列放不下时，再启用它；")]),t._v(" "),s("li",[t._v("2 值，表示无条件开启功能；")])])]),t._v(" "),s("li",[s("img",{attrs:{src:v(800),alt:"image-20220127234622593"}})])]),t._v(" "),s("h4",{attrs:{id:"如何防御-syn-攻击-syn-攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何防御-syn-攻击-syn-攻击"}},[t._v("#")]),t._v(" 如何防御[SYN 攻击](#SYN 攻击)？")]),t._v(" "),s("ul",[s("li",[t._v("增大半连接队列；\n"),s("ul",[s("li",[s("strong",[t._v("不能只单纯增大 tcp_max_syn_backlog 的值，还需一同增大 somaxconn 和 backlog，也就是增大全连接队列")]),t._v("。否则，只单纯增大 tcp_max_syn_backlog 是无效的。")]),t._v(" "),s("li",[t._v("增大 tcp_max_syn_backlog 和 somaxconn 的方法是修改 Linux 内核参数：\n"),s("ul",[s("li",[s("img",{attrs:{src:v(801),alt:"image-20220128000329047"}})])])]),t._v(" "),s("li",[t._v("增大 backlog 的方式，每个 Web 服务都不同，比如 Nginx 增大 backlog 的方法如下：\n"),s("ul",[s("li",[s("img",{attrs:{src:v(802),alt:"image-20220128000403415"}})])])]),t._v(" "),s("li",[t._v("最后，改变了如上这些参数后，要重启 Nginx 服务，因为半连接队列和全连接队列都是在 listen() 初始化的。")])])]),t._v(" "),s("li",[t._v("开启 tcp_syncookies 功能；\n"),s("ul",[s("li",[t._v("开启 tcp_syncookies 功能的方式也很简单，修改 Linux 内核参数：\n"),s("ul",[s("li",[s("img",{attrs:{src:v(803),alt:"image-20220128000440120"}})])])])])]),t._v(" "),s("li",[t._v("减少 SYN+ACK 重传次数；\n"),s("ul",[s("li",[t._v("可以减少 SYN+ACK 的重传次数，以加快处于 SYN_REVC 状态的 TCP 连接断开。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(804),alt:"image-20220128000733541"}})])])])]),t._v(" "),s("h3",{attrs:{id:"tcp参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp参数"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://mp.weixin.qq.com/s/fjnChU3MKNc_x-Wk7evLhg",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP参数"),s("OutboundLink")],1)]),t._v(" "),s("h4",{attrs:{id:"tcp三次握手性能提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手性能提升"}},[t._v("#")]),t._v(" TCP三次握手性能提升")]),t._v(" "),s("ul",[s("li",[s("p",[s("img",{attrs:{src:v(805),alt:"image-20220129230432308"}})])]),t._v(" "),s("li",[s("p",[s("img",{attrs:{src:v(806),alt:"image-20220129231851972"}})])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("客户端优化")])]),t._v(" "),s("ul",[s("li",[t._v("SYN超时重传，1+2+4+8+16+32=63 秒，大约 1 分钟左右。\n"),s("ul",[s("li",[t._v("可以根据网络的稳定性和目标服务器的繁忙程度修改 SYN 的重传次数，调整客户端的三次握手时间上限。比如内网中通讯时，就可以适当调低重试次数，尽快把错误暴露给应用程序。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(807),alt:"image-20220129225825121"}})])])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("服务端优化")])]),t._v(" "),s("ul",[s("li",[t._v("……")])])]),t._v(" "),s("li",[s("h4",{attrs:{id:"如何绕过三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何绕过三次握手"}},[t._v("#")]),t._v(" 如何绕过三次握手？")]),t._v(" "),s("ul",[s("li",[t._v("在 Linux 3.7 内核版本之后，提供了 TCP Fast Open 功能，这个功能可以减少 TCP 连接建立的时延。如下图连接建立后，这之后发起 HTTP GET 请求的时候，可以绕过三次握手，这就减少了握手带来的 1 个 RTT 的时间消耗。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(808),alt:"image-20220129231552125"}})]),t._v(" "),s("li",[t._v("在 Linux 系统中，可以通过"),s("strong",[t._v("设置 tcp_fastopn 内核参数，来打开 Fast Open 功能")]),t._v("：\n"),s("ul",[s("li",[t._v("0 关闭；")]),t._v(" "),s("li",[t._v("1 作为客户端使用 Fast Open 功能；")]),t._v(" "),s("li",[t._v("2 作为服务端使用 Fast Open 功能；")]),t._v(" "),s("li",[t._v("3 无论作为客户端还是服务器，都可以使用 Fast Open 功能；")]),t._v(" "),s("li",[s("img",{attrs:{src:v(809),alt:"image-20220129231750390"}})])])])])])]),t._v(" "),s("h4",{attrs:{id:"tcp四次挥手性能提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp四次挥手性能提升"}},[t._v("#")]),t._v(" TCP四次挥手性能提升")]),t._v(" "),s("ul",[s("li",[t._v("客户端和服务端双方都可以主动断开连接，"),s("strong",[t._v("通常先关闭连接的一方称为主动方，后关闭连接的一方称为被动方")]),t._v("。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(810),alt:"image-20220130000933923"}})]),t._v(" "),s("li",[s("strong",[t._v("主动方优化")])]),t._v(" "),s("li",[s("strong",[t._v("被动方优化")])])]),t._v(" "),s("h4",{attrs:{id:"tcp数据传输的性能提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp数据传输的性能提升"}},[t._v("#")]),t._v(" TCP数据传输的性能提升")]),t._v(" "),s("ul",[s("li",[s("img",{attrs:{src:v(811),alt:"img"}})])]),t._v(" "),s("h3",{attrs:{id:"为什么弱网环境不能用tcp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么弱网环境不能用tcp"}},[t._v("#")]),t._v(" 为什么弱网环境不能用tcp？")]),t._v(" "),s("ul",[s("li",[t._v("TCP 的拥塞控制算法会在丢包时主动降低吞吐量；")]),t._v(" "),s("li",[t._v("TCP 的三次握手增加了数据传输的延迟和额外开销；")]),t._v(" "),s("li",[t._v("TCP 的累计应答机制导致了数据段的传输；")])]),t._v(" "),s("h3",{attrs:{id:"如何在不杀掉进程前提-关闭一个-tcp-连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何在不杀掉进程前提-关闭一个-tcp-连接"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://mp.weixin.qq.com/s/BVaReBOHm1vOQXsKgZ8ZSQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何在不杀掉进程前提，关闭一个 TCP 连接？"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[s("p",[t._v("可以伪造一个四元组相同的 SYN 报文，来拿到“合法”的序列号。")])]),t._v(" "),s("li",[s("p",[t._v("d./killcx <IP地址>:<端口号>")])])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://draveness.me/whys-the-design-tcp-performance/",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么TCP协议有性能问题？"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("timewait是什么")]),t._v(" "),s("p",[t._v("i/o多路复用是什么")]),t._v(" "),s("p",[t._v("tcp/ip的连接和断开过程")]),t._v(" "),s("p",[t._v("tcp 连接过程中客户端与服务端使用什么函数实现连接")]),t._v(" "),s("p",[t._v("tcp怎么保证可靠传输")]),t._v(" "),s("p",[t._v("tcp粘包、丢包")]),t._v(" "),s("p",[t._v("tcp中间连接的时候断开会发生什么（重传、超时、等待状态、tcp可靠连接原理）")]),t._v(" "),s("p",[t._v("tcp怎么传递消息")]),t._v(" "),s("p",[t._v("为何tcp没有udp快？")]),t._v(" "),s("p",[t._v("udp怎么实现可靠传输？")]),t._v(" "),s("p",[t._v("OSI七层模型")]),t._v(" "),s("p",[t._v("TCP/IP五层模型")]),t._v(" "),s("p",[t._v("TCP/IP协议总结")]),t._v(" "),s("p",[t._v("TCP、UDP区别")]),t._v(" "),s("p",[t._v("TCP三次握手、四次挥手")]),t._v(" "),s("p",[t._v("TCP状态转换")]),t._v(" "),s("p",[t._v("TCP状态中TIME_WAIT")]),t._v(" "),s("p",[t._v("TCP第三次握手失败会出现什么")]),t._v(" "),s("p",[t._v("TCP长连接和短链接及优缺点")]),t._v(" "),s("p",[t._v("TCP如何保证可靠性传输")]),t._v(" "),s("p",[t._v("TCP如何解决粘包、拆包问题")]),t._v(" "),s("p",[t._v("TCP为什么可靠")]),t._v(" "),s("p",[t._v("Nagle算法")]),t._v(" "),s("h2",{attrs:{id:"udp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[t._v("#")]),t._v(" UDP")]),t._v(" "),s("h3",{attrs:{id:"udp头部格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp头部格式"}},[t._v("#")]),t._v(" UDP头部格式")]),t._v(" "),s("ul",[s("li",[t._v("UDP 协议真的非常简，头部只有 "),s("code",[t._v("8")]),t._v(" 个字节（ 64 位），UDP 的头部格式如下：")]),t._v(" "),s("li",[t._v("目标和源端口：主要是告诉 UDP 协议应该把报文发给哪个进程。")]),t._v(" "),s("li",[t._v("包长度：该字段保存了 UDP 首部的长度跟数据的长度之和。")]),t._v(" "),s("li",[t._v("校验和：校验和是为了提供可靠的 UDP 首部和数据而设计。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(812),alt:"image-20220121162000820"}})])]),t._v(" "),s("h3",{attrs:{id:"udp中一个包的大小最大能多大"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp中一个包的大小最大能多大"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"http://www.52im.net/thread-29-1-1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("UDP中一个包的大小最大能多大"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[t._v("局域网环境下，建议将UDP数据控制在1472字节以下。\n"),s("ul",[s("li",[t._v("1500(MTU)-20(IP头部大小)-8(UDP头部大小)")])])]),t._v(" "),s("li",[t._v("Internet编程时，建议将UDP数据控制在548字节以下。\n"),s("ul",[s("li",[t._v("鉴于Internet上的标准MTU值为576字节，所以我建议在进行Internet的UDP编程时， 最好将UDP的数据长度控件在548字节(576-8-20)以内。")])])])]),t._v(" "),s("h3",{attrs:{id:"什么情况会导致-udp-丢包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么情况会导致-udp-丢包"}},[t._v("#")]),t._v(" 什么情况会导致 UDP 丢包？")]),t._v(" "),s("ul",[s("li",[t._v("数据报分片重组丢失：\n"),s("ul",[s("li",[t._v("UDP 协议本身规定的大小是 64kb，但是在数据链路层有 MTU 的限制，大小大概在 5kb，所以当你发送一个很大的 UDP 包的时候，这个包会在 IP 层进行分片，然后重组。这个过程就有可能导致分片的包丢失。UDP 本身有 CRC 检测机制，会抛弃掉丢失的 UDP 包；")])])]),t._v(" "),s("li",[t._v("UDP 缓冲区填满：\n"),s("ul",[s("li",[t._v("UDP 的缓冲区已经被填满的时候，接收方还没有处理这部分的 UDP 数据报，这个时候再过来的数据报就没有地方可以存了，自然就都被丢弃了。")])])])]),t._v(" "),s("h3",{attrs:{id:"可靠传输的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可靠传输的原理"}},[t._v("#")]),t._v(" 可靠传输的原理")]),t._v(" "),s("ul",[s("li",[t._v("一是基于ARQ（Automatic Repeat reQuest）的确认和重传机制。\n"),s("ul",[s("li",[t._v("ARQ包括停等式、回退N帧、选择重传等机制。由于停等式的效率太低，TCP和可靠UDP协议一般使用的是基于回退N帧机制和滑动窗口协议的连续式ARQ，TCP后来也引入了SACK，以提高性能。")])])]),t._v(" "),s("li",[t._v("二是使用前向纠错（FEC）。")])]),t._v(" "),s("h3",{attrs:{id:"udp如何实现tcp可靠传输"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp如何实现tcp可靠传输"}},[t._v("#")]),t._v(" UDP如何实现TCP可靠传输")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("参考：")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.cn/post/6844904089218711559",target:"_blank",rel:"noopener noreferrer"}},[t._v("那些能替代TCP的RUDP方案"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/rCvWZwqxMBU2Z8YpaiYLrA",target:"_blank",rel:"noopener noreferrer"}},[t._v("UDP如何实现TCP可靠传输"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("p",[s("font",{attrs:{color:"cornflowerblue"}},[t._v("可靠UDP传输主要还是依靠重传机制，个别协议会用FEC作为辅助手段")]),t._v("。")],1)]),t._v(" "),s("li",[s("p",[t._v("UDT(UDP-based Data Transfer Protocol)")]),t._v(" "),s("ul",[s("li",[t._v("UDT的主要目的是支持高速广域网上的海量数据传输，所以除了在UDP之上实现类似TCP的协议和算法之外，UDT还对TCP的拥塞算法做了一些细节上的调整，包括Negative-ACK(NAK)、ACK to ACK(ACK2)、基于对数的动态AIMD等。不过UDT的重传效率较低，无效报文，实际效果并不理想。")]),t._v(" "),s("li",[s("a",{attrs:{href:"ttps://git.dorkbox.com/dorkbox/UDT/src/branch/master/src"}},[t._v("参考实现")])])])]),t._v(" "),s("li",[s("p",[t._v("KCP")]),t._v(" "),s("ul",[s("li",[t._v("KCP是一个很简单的ARQ的实现，包括选择重传和快重传等机制，对上层提供一个可靠的字节流。应用层可以使用多流复用的框架来实现对多个流的支持。另外，KCP增加了可配置启用的加密和FEC选项，FEC用的是Reed-Solomon纠删码，例如可以配置发送10%的冗余数据，来减少丢包时需要的重传，从而降低数据传输的延时。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/skywind3000/kcp",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考实现"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("p",[t._v("QUIC")]),t._v(" "),s("ul",[s("li",[t._v("QUIC是Google实现的一种可靠UDP传输协议，并且已经被选择作为HTTP/3的基础。特点内建安全性，集成TLS，集成多种拥塞算法，包括最新的BBR，多流支持，连接迁移。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.chromium.org/quic/playing-with-quic",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考实现"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("p",[t._v("uTP")]),t._v(" "),s("ul",[s("li",[t._v("uTP是BitTorrent中新增加的一种UDP传输协议，主要特点是使用了LEDBAT（Low Extra Delay Background Transport）拥塞算法。这种算法基于延时来检测网络拥塞，可以更早的探测到拥塞和更早的以及更大幅度的进行避让，从而避免影响用户上网操作的进行，保持后台下载跟前台操作的和平共处。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/bittorrent/libutp",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考实现"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("p",[t._v("SCTP（StreamControl Transmission Protocol，流控制传输协议）")]),t._v(" "),s("ul",[s("li",[t._v("准确的说，SCTP不是一种可靠UDP协议，而是一种跟TCP/UDP平级的传输层协议，是IETF在2000年指定的标准协议。目前Linux和部分UNIX已经集成，Windows和Mac需要使用第三方包来实现。特点有跟TCP一样面向连接，提供可靠传输，跟UDP一样面向消息，多流支持，每个流可以配置成接受有序或无序的消息，可以配置多个地址，利用多条网络传输通道，更好的安全性：要求四次握手，避免TCP的SYN Flooding攻击。")]),t._v(" "),s("li",[t._v("注意：webrtc的SCTP不是跟TCP和UDP平级的传输层协议，它是基于UDP的开发实现。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/sctplab/usrsctp",target:"_blank",rel:"noopener noreferrer"}},[t._v("详见webrtc代码"),s("OutboundLink")],1)])])])]),t._v(" "),s("h2",{attrs:{id:"ping-icmp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ping-icmp"}},[t._v("#")]),t._v(" Ping / ICMP")]),t._v(" "),s("p",[s("strong",[t._v("参考：")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/leE2DgDOl5z90hG2gG1Urw",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解Ping工作原理"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("ping 是基于 "),s("code",[t._v("ICMP")]),t._v(" 协议工作的，所以要明白 ping 的工作，首先我们先来熟悉"),s("strong",[t._v("ICMP 协议")]),t._v("（互联网控制报文协议）。")]),t._v(" "),s("h3",{attrs:{id:"icmp-功能都有什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#icmp-功能都有什么"}},[t._v("#")]),t._v(" ICMP 功能都有什么？")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("ICMP")]),t._v(" 主要的功能包括："),s("strong",[t._v("确认 IP 包是否成功送达目标地址、报告发送过程中 IP 包被废弃的原因和改善网络设置等")]),t._v("。")])]),t._v(" "),s("h3",{attrs:{id:"icmp-包头格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#icmp-包头格式"}},[t._v("#")]),t._v(" ICMP 包头格式")]),t._v(" "),s("ul",[s("li",[t._v("ICMP 报文是封装在 IP 包里面，它工作在网络层，是 IP 协议的助手。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(813),alt:"image-20220124161610624"}})]),t._v(" "),s("li",[t._v("ICMP 包头的"),s("strong",[t._v("类型")]),t._v("字段，大致可以分为两大类：\n"),s("ul",[s("li",[t._v("一类是用于诊断的查询消息，也就是「"),s("strong",[t._v("查询报文类型")]),t._v("」。\n"),s("ul",[s("li",[t._v("向对端主机发送"),s("strong",[t._v("回送请求")]),t._v("的消息（"),s("code",[t._v("ICMP Echo Request Message")]),t._v("，类型 "),s("code",[t._v("8")]),t._v("）。")]),t._v(" "),s("li",[t._v("接收对端主机发回来的"),s("strong",[t._v("回送应答")]),t._v("消息（"),s("code",[t._v("ICMP Echo Reply Message")]),t._v("，类型 "),s("code",[t._v("0")]),t._v("）。")])])]),t._v(" "),s("li",[t._v("另一类是通知出错原因的错误消息，也就是「"),s("strong",[t._v("差错报文类型")]),t._v("」。\n"),s("ul",[s("li",[t._v("目标不可达消息 —— 类型 为 "),s("code",[t._v("3")]),t._v("（主要有网络、主机、协议、端口不可达和需要进行分片但设置了不分片位代码为 "),s("code",[t._v("4")]),t._v("）；")]),t._v(" "),s("li",[t._v("原点抑制消息 —— 类型 "),s("code",[t._v("4")]),t._v("，为了缓和在使用低速广域线路的情况下，连接 WAN 的路由器可能会遇到网络拥堵的问题；")]),t._v(" "),s("li",[t._v("重定向消息 —— 类型 "),s("code",[t._v("5")]),t._v("；")]),t._v(" "),s("li",[t._v("超时消息 —— 类型 "),s("code",[t._v("11")]),t._v("，设置 IP 包生存周期的主要目的，是为了在路由控制遇到问题发生循环状况时，避免 IP 包无休止地在网络上被转发。；")])])]),t._v(" "),s("li",[s("img",{attrs:{src:v(814),alt:"image-20220124161736005"}})])])])]),t._v(" "),s("h3",{attrs:{id:"traceroute"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#traceroute"}},[t._v("#")]),t._v(" traceroute")]),t._v(" "),s("p",[t._v("充分利用 ICMP "),s("strong",[t._v("差错报文类型")]),t._v("的应用叫做 "),s("code",[t._v("traceroute")]),t._v("（在UNIX、MacOS中是这个命令，而在Windows中对等的命令叫做 tracert ）。")]),t._v(" "),s("h4",{attrs:{id:"traceroute-作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#traceroute-作用"}},[t._v("#")]),t._v(" traceroute 作用")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("通过故意设置特殊的 TTL，来追踪去往目的地时沿途经过的路由器。")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("traceroute 192.168.1.100\n它的原理就是利用 IP 包的生存期限 从1开始按照顺序递增的同时发送UDP包，强制接收ICMP超时消息的一种方法。\n比如，将 TTL 设置 为 1，则遇到第一个路由器，就牺牲了，接着返回 ICMP 差错报文网络包，类型是时间超时。\n接下来将 TTL 设置为 2，第一个路由器过了，遇到第二个路由器也牺牲了，也同意返回了 ICMP 差错报文数据包，如此往复，直到到达目的主机。\n这样的过程，traceroute 就可以拿到了所有的路由器 IP。\n当然有的路由器根本就不会返回这个 ICMP，所以对于有的公网地址，是看不到中间经过的路由的。")]),t._v(" "),s("li",[t._v("发送方如何知道发出的 UDP 包是否到达了目的主机呢？\ntaceroute 在发送 UDP 包时，会填入一个不可能的端口号值作为 UDP 目标端口号（大于 3000 ）。当目的主机，收到 UDP 包后，会返回 ICMP 差错报文消息，但这个差错报文消息的类型「端口不可达」。\n所以，当差错报文类型是端口不可达时，说明发送方发出的 UDP 包到达了目的主机。")])])])]),t._v(" "),s("li",[s("p",[t._v("通过故意设置不分片，从而确定路径的 MTU。")]),t._v(" "),s("blockquote",[s("ul",[s("li",[s("p",[t._v("首先在发送端主机发送 "),s("code",[t._v("IP")]),t._v(" 数据报时，将 "),s("code",[t._v("IP")]),t._v(" 包首部的"),s("strong",[t._v("分片禁止标志位设置为 1")]),t._v("。根据这个标志位，途中的路由器不会对大数据包进行分片，而是将包丢弃。")]),t._v(" "),s("p",[t._v("随后，通过一个 ICMP 的不可达消息将"),s("strong",[t._v("数据链路上 MTU 的值")]),t._v("一起给发送主机，不可达消息的类型为「"),s("strong",[t._v("需要进行分片但设置了不分片位")]),t._v("」。")]),t._v(" "),s("p",[t._v("发送主机端每次收到 ICMP 差错报文时就"),s("strong",[t._v("减少")]),t._v("包的大小，以此来定位一个合适的 "),s("code",[t._v("MTU")]),t._v(" 值，以便能到达目标主机。")])])])])])]),t._v(" "),s("h2",{attrs:{id:"http"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),s("h3",{attrs:{id:"基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),s("h4",{attrs:{id:"http-是什么-描述一下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-是什么-描述一下"}},[t._v("#")]),t._v(" HTTP 是什么？描述一下")]),t._v(" "),s("ul",[s("li",[t._v("超文本传输协议；")]),t._v(" "),s("li",[t._v("即HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。")])]),t._v(" "),s("h4",{attrs:{id:"http-的状态码-有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-的状态码-有哪些"}},[t._v("#")]),t._v(" HTTP 的状态码，有哪些？")]),t._v(" "),s("ul",[s("li",[s("em",[t._v("1xx")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("1xx")]),t._v(" 类状态码属于"),s("strong",[t._v("提示信息")]),t._v("，是协议处理中的一种中间状态，实际用到的比较少。")])])]),t._v(" "),s("li",[s("em",[t._v("2xx")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("2xx")]),t._v(" 类状态码表示服务器"),s("strong",[t._v("成功")]),t._v("处理了客户端的请求。")]),t._v(" "),s("li",[t._v("「"),s("strong",[t._v("200 OK")]),t._v("」是最常见的成功状态码，表示一切正常。如果是非 "),s("code",[t._v("HEAD")]),t._v(" 请求，服务器返回的响应头都会有 body 数据。")]),t._v(" "),s("li",[t._v("「"),s("strong",[t._v("204 No Content")]),t._v("」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。")]),t._v(" "),s("li",[t._v("「"),s("strong",[t._v("206 Partial Content")]),t._v("」是应用于 HTTP 分块下载或断电续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。")])])]),t._v(" "),s("li",[s("em",[t._v("3xx")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("3xx")]),t._v(" 类状态码表示客户端请求的资源发送了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是"),s("strong",[t._v("重定向")]),t._v("。")]),t._v(" "),s("li",[t._v("「"),s("strong",[t._v("301 Moved Permanently")]),t._v("」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。")]),t._v(" "),s("li",[t._v("「"),s("strong",[t._v("302 Moved Permanently")]),t._v("」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。")]),t._v(" "),s("li",[t._v("「"),s("strong",[t._v("304 Not Modified")]),t._v("」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，用于缓存控制。")])])]),t._v(" "),s("li",[s("em",[t._v("4xx")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("4xx")]),t._v(" 类状态码表示客户端发送的"),s("strong",[t._v("报文有误")]),t._v("，服务器无法处理，也就是错误码的含义。")])])]),t._v(" "),s("li",[s("em",[t._v("5xx")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("5xx")]),t._v(" 类状态码表示客户端请求报文正确，但是"),s("strong",[t._v("服务器处理时内部发生了错误")]),t._v("，属于服务器端的错误码。")])])])]),t._v(" "),s("h4",{attrs:{id:"http常见字段有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http常见字段有哪些"}},[t._v("#")]),t._v(" HTTP常见字段有哪些？")]),t._v(" "),s("ul",[s("li",[s("em",[t._v("Host")]),t._v(" "),s("ul",[s("li",[t._v("客户端发送请求时，用来指定服务器的域名。")])])]),t._v(" "),s("li",[s("em",[t._v("Content-Length 字段")]),t._v(" "),s("ul",[s("li",[t._v("服务器在返回数据时，会有 "),s("code",[t._v("Content-Length")]),t._v(" 字段，表明本次回应的数据长度。")])])]),t._v(" "),s("li",[s("em",[t._v("Connection 字段")]),t._v(" "),s("ul",[s("li",[t._v("最常用于客户端要求服务器使用 TCP 持久连接，以便其他请求复用。")]),t._v(" "),s("li",[t._v("HTTP/1.1 版本的默认连接都是持久连接，但为了兼容老版本的 HTTP，需要指定 "),s("code",[t._v("Connection")]),t._v(" 首部字段的值为 "),s("code",[t._v("Keep-Alive")]),t._v("。")])])]),t._v(" "),s("li",[s("em",[t._v("Content-Type 字段")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Content-Type")]),t._v(" 字段用于服务器回应时，告诉客户端，本次数据是什么格式。")])])]),t._v(" "),s("li",[s("em",[t._v("Content-Encoding 字段")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Content-Encoding")]),t._v(" 字段说明数据的压缩方法。表示服务器返回的数据使用了什么压缩格式。")])])])]),t._v(" "),s("h4",{attrs:{id:"get-和-post-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的区别"}},[t._v("#")]),t._v(" GET 和 POST 的区别？")]),t._v(" "),s("ul",[s("li",[t._v("Get\n"),s("ul",[s("li",[s("code",[t._v("Get")]),t._v(" 方法的含义是请求从服务器获取资源，这个资源可以是静态的文本、页面、图片视频等。")])])]),t._v(" "),s("li",[t._v("Post\n"),s("ul",[s("li",[t._v("向 "),s("code",[t._v("URI")]),t._v(" 指定的资源提交数据，数据就放在报文的 body 里。")])])])]),t._v(" "),s("h4",{attrs:{id:"get-和-post-方法都是安全和幂等的吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-方法都是安全和幂等的吗"}},[t._v("#")]),t._v(" GET 和 POST 方法都是安全和幂等的吗？")]),t._v(" "),s("ul",[s("li",[t._v("在 HTTP 协议里，所谓的「安全」是指请求方法不会「破坏」服务器上的资源。")]),t._v(" "),s("li",[t._v("所谓的「幂等」，意思是多次执行相同的操作，结果都是「相同」的。")]),t._v(" "),s("li",[s("strong",[t._v("GET 方法就是安全且幂等的")]),t._v("，因为它是「只读」操作，无论操作多少次，服务器上的数据都是安全的，且每次的结果都是相同的。")]),t._v(" "),s("li",[s("strong",[t._v("POST")]),t._v(" 因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是"),s("strong",[t._v("不安全")]),t._v("的，且多次提交数据就会创建多个资源，所以"),s("strong",[t._v("不是幂等")]),t._v("的。")])]),t._v(" "),s("h3",{attrs:{id:"http特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http特性"}},[t._v("#")]),t._v(" HTTP特性")]),t._v(" "),s("h4",{attrs:{id:"http-1-1-的优点有哪些-怎么体现的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1-的优点有哪些-怎么体现的"}},[t._v("#")]),t._v(" HTTP/1.1 的优点有哪些，怎么体现的")]),t._v(" "),s("ul",[s("li",[t._v("HTTP 最凸出的优点是「简单、灵活和易于扩展、应用广泛和跨平台」。")])]),t._v(" "),s("h4",{attrs:{id:"http-1-1-的缺点呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1-的缺点呢"}},[t._v("#")]),t._v(" HTTP/1.1 的缺点呢？")]),t._v(" "),s("ul",[s("li",[t._v("HTTP 协议里有优缺点一体的"),s("strong",[t._v("双刃剑")]),t._v("，分别是「无状态、明文传输」，同时还有一大缺点「不安全」。")]),t._v(" "),s("li",[t._v("对于无状态的问题，解法方案有很多种，其中比较简单的方式用 "),s("strong",[t._v("Cookie")]),t._v(" 技术。")]),t._v(" "),s("li",[t._v("HTTP 的安全问题，可以用 HTTPS 的方式解决，也就是通过引入 SSL/TLS 层，使得在安全上达到了极致。")])]),t._v(" "),s("h4",{attrs:{id:"http-1-1-的性能如何"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1-的性能如何"}},[t._v("#")]),t._v(" HTTP/1.1 的性能如何？")]),t._v(" "),s("ul",[s("li",[t._v("长连接\n"),s("ul",[s("li",[t._v("HTTP/1.1 提出了"),s("strong",[t._v("长连接")]),t._v("的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。")])])]),t._v(" "),s("li",[t._v("管道网络传输\n"),s("ul",[s("li",[t._v("HTTP/1.1 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。")]),t._v(" "),s("li",[t._v("即可在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。")])])]),t._v(" "),s("li",[t._v("队头阻塞\n"),s("ul",[s("li",[t._v("请求 - 应答」的模式加剧了 HTTP 的性能问题。")]),t._v(" "),s("li",[t._v("因为当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一同被阻塞了，会招致客户端一直请求不到数据，这也就是「"),s("strong",[t._v("队头阻塞")]),t._v("」。"),s("strong",[t._v("好比上班的路上塞车")]),t._v("。")])])])]),t._v(" "),s("h3",{attrs:{id:"http与https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http与https"}},[t._v("#")]),t._v(" HTTP与HTTPS")]),t._v(" "),s("h4",{attrs:{id:"http-与-https-有哪些区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-与-https-有哪些区别"}},[t._v("#")]),t._v(" HTTP 与 HTTPS 有哪些区别？")]),t._v(" "),s("ul",[s("li",[t._v("HTTP 是超文本传输协议，信息是明文传输，存在安全风险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输。")]),t._v(" "),s("li",[t._v("HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。而 HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。")]),t._v(" "),s("li",[t._v("HTTP 的端口号是 80，HTTPS 的端口号是 443。")]),t._v(" "),s("li",[t._v("HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。")])]),t._v(" "),s("h4",{attrs:{id:"https-解决了-http-的哪些问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https-解决了-http-的哪些问题"}},[t._v("#")]),t._v(" HTTPS 解决了 HTTP 的哪些问题？")]),t._v(" "),s("ul",[s("li",[t._v("HTTP 由于是明文传输，所以安全上存在以下三个风险：\n"),s("ul",[s("li",[s("strong",[t._v("窃听风险")]),t._v("，比如通信链路上可以获取通信内容，用户号容易没。")]),t._v(" "),s("li",[s("strong",[t._v("篡改风险")]),t._v("，比如强制入垃圾广告，视觉污染，用户眼容易瞎。")]),t._v(" "),s("li",[s("strong",[t._v("冒充风险")]),t._v("，比如冒充淘宝网站，用户钱容易没。")])])]),t._v(" "),s("li",[t._v("HTTP"),s("strong",[t._v("S")]),t._v(" 在 HTTP 与 TCP 层之间加入了 "),s("code",[t._v("SSL/TLS")]),t._v(" 协议。\n"),s("ul",[s("li",[s("strong",[t._v("信息加密")]),t._v("：交互信息无法被窃取，但你的号会因为「自身忘记」账号而没。")]),t._v(" "),s("li",[s("strong",[t._v("校验机制")]),t._v("：无法篡改通信内容，篡改了就不能正常显示，但百度「竞价排名」依然可以搜索垃圾广告。")]),t._v(" "),s("li",[s("strong",[t._v("身份证书")]),t._v("：证明淘宝是真的淘宝网，但你的钱还是会因为「剁手」而没。")])])])]),t._v(" "),s("h4",{attrs:{id:"https-是如何解决上面的三个风险的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https-是如何解决上面的三个风险的"}},[t._v("#")]),t._v(" HTTPS 是如何解决上面的三个风险的？")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("混合加密")]),t._v("的方式实现信息的"),s("strong",[t._v("机密性")]),t._v("，解决了窃听的风险。")]),t._v(" "),s("li",[s("strong",[t._v("摘要算法")]),t._v("的方式来实现"),s("strong",[t._v("完整性")]),t._v("，它能够为数据生成独一无二的「指纹」，指纹用于校验数据的完整性，解决了篡改的风险。")]),t._v(" "),s("li",[t._v("将服务器公钥放入到"),s("strong",[t._v("数字证书")]),t._v("中，解决了冒充的风险。")])]),t._v(" "),s("h4",{attrs:{id:"https-是如何建立连接的-其间交互了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https-是如何建立连接的-其间交互了什么"}},[t._v("#")]),t._v(" HTTPS  是如何建立连接的？其间交互了什么？")]),t._v(" "),s("ul",[s("li",[t._v("SSL/TLS 协议，前两步是 SSL/TLS 的建立过程，也就是握手阶段。SSL/TLS 的「握手阶段」涉及"),s("strong",[t._v("四次")]),t._v("通信：\n"),s("ul",[s("li",[t._v("客户端向服务器索要并验证服务器的公钥。")]),t._v(" "),s("li",[t._v("双方协商生产「会话秘钥」。")]),t._v(" "),s("li",[t._v("双方采用「会话秘钥」进行加密通信。")])])])]),t._v(" "),s("h4",{attrs:{id:"https加密过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https加密过程"}},[t._v("#")]),t._v(" HTTPS加密过程")]),t._v(" "),s("h3",{attrs:{id:"http-1-1、http-2、http-3-演变"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1、http-2、http-3-演变"}},[t._v("#")]),t._v(" HTTP/1.1、HTTP/2、HTTP/3 演变")]),t._v(" "),s("h4",{attrs:{id:"说说-http-1-1-相比-http-1-0-提高了什么性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说-http-1-1-相比-http-1-0-提高了什么性能"}},[t._v("#")]),t._v(" 说说 HTTP/1.1 相比 HTTP/1.0 提高了什么性能？")]),t._v(" "),s("ul",[s("li",[t._v("HTTP/1.1 相比 HTTP/1.0 性能上的改进：\n"),s("ul",[s("li",[t._v("使用 TCP 长连接的方式改善了 HTTP/1.0 短连接造成的性能开销。")]),t._v(" "),s("li",[t._v("支持 管道（pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。")])])]),t._v(" "),s("li",[t._v("但 HTTP/1.1 还是有性能瓶颈：\n"),s("ul",[s("li",[t._v("请求 / 响应头部（Header）未经压缩就发送，首部信息越多延迟越大。只能压缩 "),s("code",[t._v("Body")]),t._v(" 的部分；")]),t._v(" "),s("li",[t._v("发送冗长的首部。每次互相发送相同的首部造成的浪费较多；")]),t._v(" "),s("li",[t._v("服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端一直请求不到数据，也就是队头阻塞；")]),t._v(" "),s("li",[t._v("没有请求优先级控制；")]),t._v(" "),s("li",[t._v("请求只能从客户端开始，服务器只能被动响应。")])])])]),t._v(" "),s("h4",{attrs:{id:"上面的-http-1-1-的性能瓶颈-http-2-做了什么优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#上面的-http-1-1-的性能瓶颈-http-2-做了什么优化"}},[t._v("#")]),t._v(" 上面的 HTTP/1.1 的性能瓶颈，HTTP/2 做了什么优化？")]),t._v(" "),s("ul",[s("li",[t._v("HTTP/2 协议是基于 HTTPS 的，所以 HTTP/2 的安全性也是有保障的。")]),t._v(" "),s("li",[t._v("那 HTTP/2 相比 HTTP/1.1 性能上的改进：\n"),s("ul",[s("li",[t._v("头部压缩。HTTP/2 会"),s("strong",[t._v("压缩头")]),t._v("（Header）如果你同时发出多个请求，他们的头是一样的或是相似的，那么，协议会帮你"),s("strong",[t._v("消除重复的分")]),t._v("。")]),t._v(" "),s("li",[t._v("二进制格式。HTTP/2 不再像 HTTP/1.1 里的纯文本形式的报文，而是全面采用了"),s("strong",[t._v("二进制格式")]),t._v("，增加了数据传输的效率。头信息和数据体都是二进制，并且统称为帧（frame）："),s("strong",[t._v("头信息帧和数据帧")]),t._v("。")]),t._v(" "),s("li",[t._v("数据流。HTTP/2 的数据包不是按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。因此，必须要对数据包做标记，指出它属于哪个回应。")]),t._v(" "),s("li",[t._v("多路复用。HTTP/2 是可以在"),s("strong",[t._v("一个连接中并发多个请求或回应，而不用按照顺序一一对应")]),t._v("。移除了 HTTP/1.1 中的串行请求，不需要排队等待，也就不会再出现「队头阻塞」问题，"),s("strong",[t._v("降低了延迟，大幅度提高了连接的利用率")]),t._v("。")]),t._v(" "),s("li",[t._v("服务器推送。HTTP/2 还在一定程度上改善了传统的「请求 - 应答」工作模式，服务不再是被动地响应，也可以"),s("strong",[t._v("主动")]),t._v("向客户端发送消息。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(815),alt:"image-20220125111752767"}})])])])]),t._v(" "),s("h4",{attrs:{id:"http-2-有哪些缺陷-http-3-做了哪些优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-2-有哪些缺陷-http-3-做了哪些优化"}},[t._v("#")]),t._v(" HTTP/2 有哪些缺陷？HTTP/3 做了哪些优化？")]),t._v(" "),s("ul",[s("li",[t._v("HTTP/2 主要的问题在于：多个 HTTP 请求在复用一个 TCP 连接，下层的 TCP 协议是不知道有多少个 HTTP 请求的。")]),t._v(" "),s("li",[t._v("所以一旦发生了丢包现象，就会触发 TCP 的重传机制，这样在一个 TCP 连接中的"),s("strong",[t._v("所有的 HTTP 请求都必须等待这个丢了的包被重传回来")]),t._v("。\n"),s("ul",[s("li",[t._v("HTTP/1.1 中的管道（ pipeline）传输中如果有一个请求阻塞了，那么队列后请求也统统被阻塞住了")]),t._v(" "),s("li",[t._v("HTTP/2 多请求复用一个TCP连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。")])])]),t._v(" "),s("li",[t._v("这都是基于 TCP 传输层的问题，所以 "),s("strong",[t._v("HTTP/3 把 HTTP 下层的 TCP 协议改成了 UDP")]),t._v("！")]),t._v(" "),s("li",[s("img",{attrs:{src:v(816),alt:"image-20220125111536844"}})]),t._v(" "),s("li",[t._v("UDP 是不可靠传输的，但"),s("font",{attrs:{color:"red"}},[t._v("基于 UDP 的 QUIC 协议可以实现类似 TCP 的可靠性传输")]),t._v("。\n"),s("ul",[s("li",[t._v("QUIC 有一套机制可以保证传输的可靠性的。当某个流发生丢包时，只会阻塞这个流，其他流不受到影响。")]),t._v(" "),s("li",[t._v("TL3 升级成了最新的 "),s("code",[t._v("1.3")]),t._v(" 版本，头部压缩算法也升级成了 "),s("code",[t._v("QPack")]),t._v("。")]),t._v(" "),s("li",[t._v("HTTPS 要建立一个连接，要花费 6 次交互，先是建立三次握手，然后是 "),s("code",[t._v("TLS/1.3")]),t._v(" 的三次握手。QUIC 直接把以往的 TCP 和 "),s("code",[t._v("TLS/1.3")]),t._v(" 的 6 次交互"),s("strong",[t._v("合并成了 3 次，减少了交互次数")]),t._v("。")]),t._v(" "),s("li",[t._v("QUIC 是一个在 UDP 之上的"),s("strong",[t._v("伪")]),t._v(" TCP + TLS + HTTP/2 的多路复用的协议。QUIC 是新协议，对于很多网络设备，根本不知道什么是 QUIC，只会当做 UDP，这样会出现新的问题。所以 HTTP/3 现在普及的进度非常的缓慢，不知道未来 UDP 是否能够逆袭 TCP。")]),t._v(" "),s("li",[s("img",{attrs:{src:v(817),alt:"image-20220125112314477"}})])])],1)]),t._v(" "),s("h2",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),s("p",[t._v("非对称加密和对称加密算法")]),t._v(" "),s("p",[t._v("IP地址和子网掩码")]),t._v(" "),s("p",[t._v("ARP解析过程")]),t._v(" "),s("p",[t._v("DNS原理")])])}),[],!1,null,null,null);_.default=a.exports}}]);